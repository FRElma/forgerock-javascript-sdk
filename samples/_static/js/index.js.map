{"version":3,"sources":["webpack://forgerock/webpack/universalModuleDefinition","webpack://forgerock/webpack/bootstrap","webpack://forgerock/./src/fr-auth/callbacks/index.ts","webpack://forgerock/./src/config/index.ts","webpack://forgerock/./src/util/url.ts","webpack://forgerock/./src/fr-auth/enums.ts","webpack://forgerock/./src/config/enums.ts","webpack://forgerock/./src/util/timeout.ts","webpack://forgerock/./src/util/middleware.ts","webpack://forgerock/./src/oauth2-client/index.ts","webpack://forgerock/./src/token-storage/index.ts","webpack://forgerock/./src/auth/enums.ts","webpack://forgerock/./src/fr-auth/fr-step.ts","webpack://forgerock/./src/token-storage/constants.ts","webpack://forgerock/./src/util/pkce.ts","webpack://forgerock/./src/token-manager/index.ts","webpack://forgerock/./src/auth/index.ts","webpack://forgerock/./src/shared/constants.ts","webpack://forgerock/./src/event/index.ts","webpack://forgerock/./src/fr-auth/index.ts","webpack://forgerock/./src/fr-auth/fr-login-failure.ts","webpack://forgerock/./src/fr-policy/index.ts","webpack://forgerock/./src/fr-policy/enums.ts","webpack://forgerock/./src/fr-policy/message-creator.ts","webpack://forgerock/./src/fr-auth/fr-login-success.ts","webpack://forgerock/./src/fr-auth/callbacks/attribute-input-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/choice-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/confirmation-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/device-profile-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/hidden-value-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/kba-create-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/metadata-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/name-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/password-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/polling-wait-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/recaptcha-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/terms-and-conditions-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/text-output-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/validated-create-password-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/validated-create-username-callback.ts","webpack://forgerock/./src/util/http.ts","webpack://forgerock/./src/util/nonce.ts","webpack://forgerock/./src/user-manager/index.ts","webpack://forgerock/./src/fr-webauthn/helpers.ts","webpack://forgerock/./src/index.ts","webpack://forgerock/./src/config/constants.ts","webpack://forgerock/./src/util/realm.ts","webpack://forgerock/./src/event/helpers.ts","webpack://forgerock/./src/util/strings.ts","webpack://forgerock/./src/fr-policy/helpers.ts","webpack://forgerock/./src/fr-auth/callbacks/factory.ts","webpack://forgerock/./src/fr-device/index.ts","webpack://forgerock/./src/fr-device/defaults.ts","webpack://forgerock/./src/fr-device/collector.ts","webpack://forgerock/./src/fr-user/index.ts","webpack://forgerock/./src/token-storage/indexed-db.ts","webpack://forgerock/./src/token-storage/local-storage.ts","webpack://forgerock/./src/token-storage/session-storage.ts","webpack://forgerock/./src/oauth2-client/enums.ts","webpack://forgerock/./src/fr-webauthn/index.ts","webpack://forgerock/./src/fr-webauthn/enums.ts","webpack://forgerock/./src/fr-webauthn/script-parser.ts","webpack://forgerock/./src/http-client/index.ts","webpack://forgerock/./src/http-client/util.ts","webpack://forgerock/./src/session-manager/index.ts","webpack://forgerock/./src/util/deferred.ts","webpack://forgerock/./src/util/storage.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","payload","getType","this","type","getInputValue","selector","getArrayElement","input","setInputValue","getOutputValue","output","getOutputByName","defaultValue","find","x","array","undefined","Error","length","FRCallback","DEFAULT_TIMEOUT","set","options","isValid","serverConfig","validateServerConfig","merged","baseUrl","timeout","url","charAt","Config","getBaseUrl","port","protocol","indexOf","hostname","getEndpointPath","endpoint","realmPath","customPaths","realmUrlPath","getRealmUrlPath","defaultPaths","authenticate","authorize","accessToken","endSession","userInfo","revoke","sessions","resolve","path","URL","startsWith","basePath","pathname","split","destPath","filter","newPath","slice","join","parseQuery","fullUrl","query","searchParams","forEach","v","k","stringify","data","pairs","push","encodeURIComponent","StepType","ActionTypes","withTimeout","promise","effectiveTimeout","Promise","race","_","reject","setTimeout","request","middleware","Array","isArray","action","freeze","mwareCopy","map","fn","iterator","next","shift","ResponseType","getAuthorizeUrl","clientId","redirectUri","scope","requestParams","client_id","redirect_uri","response_type","responseType","state","verifier","createChallenge","challenge","code_challenge","code_challenge_method","getUrl","init","Authorize","cleanUp","iframe","document","createElement","noop","onLoad","clearTimeout","removeEventListener","remove","contentWindow","newHref","location","href","containsAuthCode","style","display","addEventListener","body","appendChild","src","toString","getOAuth2Tokens","code","authorizationCode","grant_type","code_verifier","headers","method","response","getBody","responseBody","status","message","parseError","responseObject","access_token","idToken","id_token","refreshToken","refresh_token","getUserInfo","json","id_token_hint","isOkOr4xx","revokeToken","token","credentials","includeToken","getActionType","ExchangeToken","Logout","RevokeToken","UserInfo","Headers","req","fetch","test","contentType","text","error","error_description","paths","OAuth2Client","getClientConfig","tokenStore","tokens","TokenStorage","ErrorCode","CallbackType","callbackFactory","Step","callbacks","convertCallbacks","getCallbackOfType","getCallbacksOfType","setCallbackValue","getDescription","description","getHeader","header","getStage","stage","FRStep","DB_NAME","TOKEN_KEY","createVerifier","size","Uint8Array","crypto","getRandomValues","base64UrlEncode","sha256","numbers","btoa","String","fromCharCode","apply","replace","uint8Array","TextEncoder","encode","subtle","digest","hashBuffer","PKCE","getTokens","forceRenew","console","authorizeUrlOptions","Code","authorizeUrl","parsedQuery","getTokensOptions","deleteTokens","TokenManager","previousStep","tree","constructUrl","configureRequest","Authenticate","StartAuthenticate","res","getResponseJson","treeParams","authIndexType","authIndexValue","params","queryString","keys","step","JSON","accept","REQUESTED_WITH","ok","Auth","listener","add","clearEventListeners","clear","dispatchEvent","event","Dispatcher","nextPayload","authId","FRAuth","LoginFailure","getCode","Number","getDetail","detail","getMessage","getProcessedMessage","messageCreator","parseErrors","getReason","reason","FRLoginFailure","PolicyKey","err","errors","failedPolicyRequirements","messages","parseFailedPolicyRequirement","failedPolicy","policyRequirements","policyRequirement","parsePolicyRequirement","policy","policyObject","parse","default","UnknownPolicy","FRPolicy","defaultMessageCreator","CannotContainCharacters","getProp","CannotContainDuplicates","CannotContainOthers","LeastCapitalLetters","numCaps","plural","LeastNumbers","numNums","MatchRegexp","MaximumLength","maxLength","MaximumNumber","MinimumLength","minLength","MinimumNumber","Required","Unique","ValidArrayItems","ValidDate","ValidEmailAddress","ValidNameFormat","ValidNumber","ValidPhoneFormat","ValidQueryFilter","ValidType","LoginSuccess","getRealm","realm","getSessionToken","tokenId","getSuccessUrl","successUrl","FRLoginSuccess","getName","getPrompt","isRequired","getFailedPolicies","getPolicies","setValue","AttributeInputCallback","getDefaultChoice","getChoices","setChoiceIndex","index","setChoiceValue","ChoiceCallback","getDefaultOption","getMessageType","getOptions","getOptionType","setOptionIndex","setOptionValue","ConfirmationCallback","isMetadataRequired","isLocationRequired","setProfile","profile","DeviceProfileCallback","HiddenValueCallback","getPredefinedQuestions","setQuestion","question","setAnswer","answer","endsWith","KbaCreateCallback","getData","MetadataCallback","setName","NameCallback","setPassword","password","PasswordCallback","getWaitTime","PollingWaitCallback","getSiteKey","setResult","result","ReCaptchaCallback","getTerms","getVersion","getCreateDate","date","Date","setAccepted","accepted","TermsAndConditionsCallback","TextOutputCallback","ValidatedCreatePasswordCallback","ValidatedCreateUsernameCallback","Math","floor","last","repeat","now","pow","substr","getCurrentUser","UserManager","parseNumberArray","matches","exec","ensureArray","arr","getClientDataJson","credential","clientDataJSON","TextDecoder","decode","getIndexOne","parseCredentials","idArray","id","Int8Array","buffer","parsePubKeyArray","parseAllowCredentialsArray","parseRelyingPartyId","relyingPartyId","includes","FRDevice","FRUser","FRWebAuthn","WebAuthnOutcome","WebAuthnStepType","HttpClient","SessionManager","Deferred","nonce","LocalStorage","names","trim","unshift","container","splice","singularText","pluralText","obj","prop","callback","BooleanAttributeInputCallback","StringAttributeInputCallback","config","fontNames","devicePlatforms","displayProps","browserProps","hardwareProps","platformProps","configurableCategories","getBrowserMeta","navigator","reduceToObject","warn","getBrowserPluginsNames","plugins","reduceToString","getDeviceName","userAgent","platform","mac","ios","windows","getDisplayMeta","screen","getHardwareMeta","getIdentifier","localStorage","getItem","Uint32Array","setItem","getInstalledFonts","canvas","context","getContext","font","baseWidth","measureText","width","reduce","prev","curr","getLocationCoordinates","geolocation","getCurrentPosition","position","latitude","coords","longitude","enableHighAccuracy","delay","maximumAge","getOSMeta","getProfile","metadata","identifier","hardware","browser","deviceName","fonts","timezone","getTimezoneOffset","props","propArr","prop1","prop2","filename","Collector","login","handler","info","loginWithUI","ui","getSession","logout","onError","openReq","indexedDB","open","onsuccess","objectStoreNames","contains","close","getReq","transaction","objectStore","target","onerror","onupgradeneeded","onSetSuccess","onUpgradeNeeded","createObjectStore","onOpenSuccess","version","txnReq","putReq","put","removeReq","delete","IndexedDBWrapper","tokenString","removeItem","LocalStorageWrapper","sessionStorage","SessionStorageWrapper","getWebAuthnStepType","outcomeCallback","getOutcomeCallback","metadataCallback","getMetadataCallback","textOutputCallback","getTextOutputCallback","allowCredentials","Authentication","Registration","None","getCallbacks","hiddenCallback","outcome","publicKey","meta","createAuthenticationPublicKey","parseWebAuthnAuthenticateText","getAuthenticationCredential","getAuthenticationOutcome","getErrorOutcome","register","createRegistrationPublicKey","parseWebAuthnRegisterText","getRegistrationCredential","getRegistrationOutcome","returnObj","cb","PublicKeyCredential","Unsupported","assertionResponse","authenticatorData","signature","attestationResponse","attestationObject","rpId","from","atob","charCodeAt","pubKeyCredParamsString","pubKeyCredParams","attestationPreference","authenticatorSelection","relyingPartyName","userId","userName","rp","attestation","user","displayName","txtEncoder","match","userVerification","rpName","userDisplayName","challengeArr","challengeJSON","excludeCredentials","allowCredentialsText","str","idArr","idJSON","_request","hasIG","newTokenRequired","requiresNewToken","authorization","handleStep","redirected","examineForIGAuthz","authorizationJSON","normalizeIGJSON","examineForRESTAuthz","normalizeRESTJSON","advices","authzOptions","buildAuthzOptions","authUrl","authInit","initialStep","isAuthzStep","hasAuthzAdvice","stepIterator","addAuthzInfoToURL","addAuthzInfoToHeaders","setAuthHeaders","jsonRes","handleNext","bypassAuthentication","getXMLValueFromURL","urlString","parser","DOMParser","decodedValue","decodeURIComponent","el","parseFromString","querySelector","innerHTML","AuthenticateToServiceConditionAdvice","TransactionConditionAdvice","updatedURL","txId","append","authzObj","baseURL","treeAuthAdvices","txnAuthAdvices","attributeValue","attributeName","fullXML","queryParams","clone","resource","actions","attributes","ttl","persist","storage"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"forgerock\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"forgerock\"] = factory();\n\telse\n\t\troot[\"forgerock\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 42);\n","import { Callback, NameValue } from '../../auth/interfaces';\n\n/**\n * Base class for authentication tree callback wrappers.\n */\nclass FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {}\n\n  /**\n   * Gets the name of this callback type.\n   */\n  public getType(): string {\n    return this.payload.type;\n  }\n\n  /**\n   * Gets the value of the specified input element, or the first element if `selector` is not\n   * provided.\n   *\n   * @param selector The index position or name of the desired element\n   */\n  public getInputValue(selector: number | string = 0): unknown {\n    return this.getArrayElement(this.payload.input, selector).value;\n  }\n\n  /**\n   * Sets the value of the specified input element, or the first element if `selector` is not\n   * provided.\n   *\n   * @param selector The index position or name of the desired element\n   */\n  public setInputValue(value: unknown, selector: number | string = 0): void {\n    this.getArrayElement(this.payload.input, selector).value = value;\n  }\n\n  /**\n   * Gets the value of the specified output element, or the first element if `selector`\n   * is not provided.\n   *\n   * @param selector The index position or name of the desired element\n   */\n  public getOutputValue(selector: number | string = 0): unknown {\n    return this.getArrayElement(this.payload.output, selector).value;\n  }\n\n  /**\n   * Gets the value of the first output element with the specified name or the\n   * specified default value.\n   *\n   * @param name The name of the desired element\n   */\n  public getOutputByName<T>(name: string, defaultValue: T): T {\n    const output = this.payload.output.find((x) => x.name === name);\n    return output ? (output.value as T) : defaultValue;\n  }\n\n  private getArrayElement(\n    array: NameValue[] | undefined,\n    selector: number | string = 0,\n  ): NameValue {\n    if (array === undefined) {\n      throw new Error(`No NameValue array was provided to search (selector ${selector})`);\n    }\n\n    if (typeof selector === 'number') {\n      if (selector < 0 || selector > array.length - 1) {\n        throw new Error(`Selector index ${selector} is out of range`);\n      }\n      return array[selector];\n    }\n\n    if (typeof selector === 'string') {\n      const input = array.find((x) => x.name === selector);\n      if (!input) {\n        throw new Error(`Missing callback input entry \"${selector}\"`);\n      }\n      return input;\n    }\n\n    throw new Error('Invalid selector value type');\n  }\n}\n\nexport default FRCallback;\n","import { DEFAULT_TIMEOUT } from './constants';\nimport { ConfigOptions, ServerConfig, ValidConfigOptions } from './interfaces';\n\n/**\n * Utility for merging configuration defaults with one-off options.\n *\n * Example:\n *\n * ```js\n * // Establish configuration defaults\n * Config.set({\n *   clientId: 'myApp',\n *   serverConfig: { baseUrl: 'https://openam-domain.com/am' },\n *   tree: 'UsernamePassword'\n * });\n *\n * // Specify overrides as needed\n * const configOverrides = { tree: 'PasswordlessWebAuthn' };\n * const step = await FRAuth.next(undefined, configOverrides);\n */\nabstract class Config {\n  private static options: ConfigOptions;\n\n  /**\n   * Sets the default options.\n   *\n   * @param options The options to use as defaults\n   */\n  public static set(options: ConfigOptions): void {\n    if (!this.isValid(options)) {\n      throw new Error('Configuration is invalid');\n    }\n    if (options.serverConfig) {\n      this.validateServerConfig(options.serverConfig);\n    }\n    this.options = { ...options };\n  }\n\n  /**\n   * Merges the provided options with the default options.  Ensures a server configuration exists.\n   *\n   * @param options The options to merge with defaults\n   */\n  public static get(options?: ConfigOptions): ValidConfigOptions {\n    if (!this.options && !options) {\n      throw new Error('Configuration has not been set');\n    }\n\n    const merged = { ...this.options, ...options };\n    if (!merged.serverConfig || !merged.serverConfig.baseUrl) {\n      throw new Error('Server configuration has not been set');\n    }\n\n    return merged as ValidConfigOptions;\n  }\n\n  private static isValid(options: ConfigOptions): boolean {\n    return !!(options && options.serverConfig);\n  }\n\n  private static validateServerConfig(serverConfig: ServerConfig): void {\n    if (!serverConfig.timeout) {\n      serverConfig.timeout = DEFAULT_TIMEOUT;\n    }\n\n    const url = serverConfig.baseUrl;\n    if (url && url.charAt(url.length - 1) !== '/') {\n      serverConfig.baseUrl = url + '/';\n    }\n  }\n}\n\nexport default Config;\nexport { DEFAULT_TIMEOUT, ConfigOptions, ServerConfig, ValidConfigOptions };\n","import { ConfigurablePaths, CustomPathConfig } from '../config/interfaces';\nimport { StringDict } from '../shared/interfaces';\nimport { getRealmUrlPath } from '../util/realm';\n\n/**\n * Returns the base URL including protocol, hostname and any non-standard port.\n * The returned URL does not include a trailing slash.\n */\nfunction getBaseUrl(url: URL): string {\n  const isNonStandardPort =\n    (url.protocol === 'http:' && ['', '80'].indexOf(url.port) === -1) ||\n    (url.protocol === 'https:' && ['', '443'].indexOf(url.port) === -1);\n  const port = isNonStandardPort ? `:${url.port}` : '';\n  const baseUrl = `${url.protocol}//${url.hostname}${port}`;\n  return baseUrl;\n}\n\nfunction getEndpointPath(\n  endpoint: ConfigurablePaths,\n  realmPath?: string,\n  customPaths?: CustomPathConfig,\n): string {\n  const realmUrlPath = getRealmUrlPath(realmPath);\n  const defaultPaths = {\n    authenticate: `json/${realmUrlPath}/authenticate`,\n    authorize: `oauth2/${realmUrlPath}/authorize`,\n    accessToken: `oauth2/${realmUrlPath}/access_token`,\n    endSession: `oauth2/${realmUrlPath}/connect/endSession`,\n    userInfo: `oauth2/${realmUrlPath}/userinfo`,\n    revoke: `oauth2/${realmUrlPath}/token/revoke`,\n    sessions: `json/${realmUrlPath}/sessions/`,\n  };\n  if (customPaths && customPaths[endpoint]) {\n    // TypeScript is not correctly reading the condition above\n    // It's thinking that customPaths[endpoint] may result in undefined\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    return customPaths[endpoint];\n  } else {\n    return defaultPaths[endpoint];\n  }\n}\n\nfunction resolve(baseUrl: string, path: string): string {\n  const url = new URL(baseUrl);\n\n  if (path.startsWith('/')) {\n    return `${getBaseUrl(url)}${path}`;\n  }\n\n  const basePath = url.pathname.split('/');\n  const destPath = path.split('/').filter((x) => !!x);\n  const newPath = [...basePath.slice(0, -1), ...destPath].join('/');\n\n  return `${getBaseUrl(url)}${newPath}`;\n}\n\nfunction parseQuery(fullUrl: string): StringDict<string> {\n  const url = new URL(fullUrl);\n  const query: StringDict<string> = {};\n  url.searchParams.forEach((v, k) => (query[k] = v));\n  return query;\n}\n\nfunction stringify(data: StringDict<string | undefined>): string {\n  const pairs = [];\n  for (const k in data) {\n    if (data[k]) {\n      pairs.push(k + '=' + encodeURIComponent(data[k] as string));\n    }\n  }\n  return pairs.join('&');\n}\n\nexport { getBaseUrl, getEndpointPath, parseQuery, resolve, stringify };\n","/**\n * Types of steps returned by the authentication tree.\n */\nenum StepType {\n  LoginFailure = 'LoginFailure',\n  LoginSuccess = 'LoginSuccess',\n  Step = 'Step',\n}\n\nexport { StepType };\n","export enum ActionTypes {\n  Authenticate = 'AUTHENTICATE',\n  Authorize = 'AUTHORIZE',\n  Logout = 'LOGOUT',\n  ExchangeToken = 'EXCHANGE_TOKEN',\n  RefreshToken = 'REFRESH_TOKEN',\n  RevokeToken = 'REVOKE_TOKEN',\n  StartAuthenticate = 'START_AUTHENTICATE',\n  UserInfo = 'USER_INFO',\n}\n","import { DEFAULT_TIMEOUT } from '../config';\n\n/** @hidden */\nfunction withTimeout<T>(promise: Promise<T>, timeout: number = DEFAULT_TIMEOUT): Promise<T> {\n  const effectiveTimeout = timeout || DEFAULT_TIMEOUT;\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      window.setTimeout(() => reject(new Error('Timeout')), effectiveTimeout),\n    ),\n  ]);\n}\n\nexport { withTimeout };\n","import Config from '../config';\nimport { RequestObj } from '../config/interfaces';\nimport { ActionTypes } from '../config/enums';\n\n/**\n * @function middlewareWrapper - A \"Node\" and \"Redux\" style middleware that is called just before\n * the request is made from the SDK. This allows you access to the request for modification.\n * @param request - A request object container the URL and the Request Init object\n * @param type - A \"Redux\" style type that contains the serialized action\n * @param payload - The payload of the action that can contain metadata\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction middlewareWrapper(request: RequestObj, type: ActionTypes, payload?: any): RequestObj {\n  const { middleware } = Config.get();\n\n  if (!Array.isArray(middleware)) {\n    return request;\n  }\n  // no mutation and no reassignment\n  const action = Object.freeze({ type, payload });\n  // Copy middleware so the `shift` below doesn't mutate source\n  const mwareCopy = middleware.map((fn) => fn);\n\n  function iterator(): RequestObj {\n    const next = mwareCopy.shift();\n    next && next(request, action, iterator);\n    return request;\n  }\n\n  return iterator();\n}\n\nexport default middlewareWrapper;\n","import { ActionTypes } from '../config/enums';\nimport Config, { ConfigOptions } from '../config/index';\nimport { ConfigurablePaths } from '../config/interfaces';\nimport { StringDict } from '../shared/interfaces';\nimport { Noop } from '../shared/types';\nimport TokenStorage from '../token-storage';\nimport { isOkOr4xx } from '../util/http';\nimport PKCE from '../util/pkce';\nimport { withTimeout } from '../util/timeout';\nimport { getEndpointPath, resolve, stringify } from '../util/url';\nimport { ResponseType } from './enums';\nimport {\n  AccessTokenResponse,\n  GetAuthorizationUrlOptions,\n  GetOAuth2TokensOptions,\n  OAuth2Tokens,\n} from './interfaces';\nimport middlewareWrapper from '../util/middleware';\n\n/**\n * OAuth 2.0 client.\n */\nabstract class OAuth2Client {\n  /**\n   * Gets the authorization URL configured in OpenAM, optionally using PKCE.\n   */\n  public static async getAuthorizeUrl(options: GetAuthorizationUrlOptions): Promise<string> {\n    const { serverConfig, clientId, redirectUri, scope } = Config.get(options);\n\n    /* eslint-disable @typescript-eslint/camelcase */\n    const requestParams: StringDict<string | undefined> = {\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      response_type: options.responseType,\n      scope,\n      state: options.state,\n    };\n    /* eslint-enable @typescript-eslint/camelcase */\n\n    if (options.verifier) {\n      const challenge = await PKCE.createChallenge(options.verifier);\n      /* eslint-disable @typescript-eslint/camelcase */\n      requestParams.code_challenge = challenge;\n      requestParams.code_challenge_method = 'S256';\n      /* eslint-enable @typescript-eslint/camelcase */\n    }\n\n    const { url } = middlewareWrapper(\n      {\n        url: new URL(this.getUrl('authorize', requestParams, options)),\n        init: {},\n      },\n      ActionTypes.Authorize,\n    );\n\n    return new Promise((resolve, reject) => {\n      const iframe = document.createElement('iframe');\n\n      // Define these here to avoid linter warnings\n      const noop: Noop = () => {\n        return;\n      };\n      let onLoad: Noop = noop;\n      let cleanUp: Noop = noop;\n      let timeout = 0;\n\n      cleanUp = (): void => {\n        window.clearTimeout(timeout);\n        iframe.removeEventListener('load', onLoad);\n        iframe.remove();\n      };\n\n      onLoad = (): void => {\n        if (iframe.contentWindow) {\n          const newHref = iframe.contentWindow.location.href;\n          if (this.containsAuthCode(newHref)) {\n            cleanUp();\n            resolve(newHref);\n          }\n        }\n      };\n\n      timeout = window.setTimeout(() => {\n        cleanUp();\n        reject('Timeout');\n      }, serverConfig.timeout);\n\n      iframe.style.display = 'none';\n      iframe.addEventListener('load', onLoad);\n      document.body.appendChild(iframe);\n      iframe.src = url.toString();\n    });\n  }\n\n  /**\n   * Exchanges an authorization code for OAuth tokens.\n   */\n  public static async getOAuth2Tokens(options: GetOAuth2TokensOptions): Promise<OAuth2Tokens> {\n    const { clientId, redirectUri } = Config.get(options);\n\n    /* eslint-disable @typescript-eslint/camelcase */\n    const requestParams: StringDict<string | undefined> = {\n      client_id: clientId,\n      code: options.authorizationCode,\n      grant_type: 'authorization_code',\n      redirect_uri: redirectUri,\n    };\n    /* eslint-enable @typescript-eslint/camelcase */\n\n    if (options.verifier) {\n      // eslint-disable-next-line @typescript-eslint/camelcase\n      requestParams.code_verifier = options.verifier;\n    }\n\n    const body = stringify(requestParams);\n    const init = {\n      body,\n      headers: {\n        'content-length': body.length.toString(),\n        'content-type': 'application/x-www-form-urlencoded',\n      },\n      method: 'POST',\n    };\n\n    const response = await this.request('accessToken', undefined, false, init, options);\n    const responseBody = await this.getBody<unknown>(response);\n\n    if (response.status !== 200) {\n      const message =\n        typeof responseBody === 'string'\n          ? `Expected 200, received ${response.status}`\n          : this.parseError(responseBody as StringDict<unknown>);\n      throw new Error(message);\n    }\n\n    const responseObject = responseBody as AccessTokenResponse;\n    if (!responseObject.access_token) {\n      throw new Error('Access token not found in response');\n    }\n\n    return {\n      accessToken: responseObject.access_token,\n      idToken: responseObject.id_token,\n      refreshToken: responseObject.refresh_token,\n    };\n  }\n\n  /**\n   * Gets OIDC user information.\n   */\n  public static async getUserInfo(options?: ConfigOptions): Promise<unknown> {\n    const response = await this.request('userInfo', undefined, true, undefined, options);\n    if (response.status !== 200) {\n      throw new Error(`Failed to get user info; received ${response.status}`);\n    }\n\n    const json = await response.json();\n    return json;\n  }\n\n  /**\n   * Invokes the OIDC end session endpoint.\n   */\n  public static async endSession(options?: ConfigOptions): Promise<Response> {\n    const { idToken } = await TokenStorage.get();\n\n    const query: StringDict<string | undefined> = {};\n    if (idToken) {\n      // eslint-disable-next-line @typescript-eslint/camelcase\n      query.id_token_hint = idToken;\n    }\n\n    const response = await this.request('endSession', query, true, undefined, options);\n    if (!isOkOr4xx(response)) {\n      throw new Error(`Failed to end session; received ${response.status}`);\n    }\n    return response;\n  }\n\n  /**\n   * Immediately revokes the stored access token.\n   */\n  public static async revokeToken(options?: ConfigOptions): Promise<Response> {\n    const { clientId } = Config.get(options);\n    const { accessToken } = await TokenStorage.get();\n\n    const init: RequestInit = {\n      // eslint-disable-next-line @typescript-eslint/camelcase\n      body: stringify({ client_id: clientId, token: accessToken }),\n      credentials: 'include',\n      headers: { 'content-type': 'application/x-www-form-urlencoded' },\n      method: 'POST',\n    };\n\n    const response = await this.request('revoke', undefined, false, init, options);\n    if (!isOkOr4xx(response)) {\n      throw new Error(`Failed to revoke token; received ${response.status}`);\n    }\n    return response;\n  }\n\n  private static async request(\n    endpoint: ConfigurablePaths,\n    query?: StringDict<string | undefined>,\n    includeToken?: boolean,\n    init?: RequestInit,\n    options?: ConfigOptions,\n  ): Promise<Response> {\n    const { serverConfig } = Config.get(options);\n    const url = this.getUrl(endpoint, query, options);\n\n    const getActionType = (endpoint: ConfigurablePaths): ActionTypes => {\n      switch (endpoint) {\n        case 'accessToken':\n          return ActionTypes.ExchangeToken;\n        case 'endSession':\n          return ActionTypes.Logout;\n        case 'revoke':\n          return ActionTypes.RevokeToken;\n        default:\n          return ActionTypes.UserInfo;\n      }\n    };\n\n    init = init || ({} as RequestInit);\n\n    if (includeToken) {\n      const { accessToken } = await TokenStorage.get();\n      init.credentials = 'include';\n      init.headers = (init.headers || new Headers()) as Headers;\n      init.headers.set('authorization', `Bearer ${accessToken}`);\n    }\n    const req = middlewareWrapper({ url: new URL(url), init }, getActionType(endpoint));\n    return await withTimeout(fetch(req.url.toString(), req.init), serverConfig.timeout);\n  }\n\n  private static containsAuthCode(url: string | null): boolean {\n    return !!url && /code=([^&]+)/.test(url);\n  }\n\n  private static async getBody<T>(response: Response): Promise<T | string> {\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.indexOf('application/json') > -1) {\n      return await response.json();\n    }\n    return await response.text();\n  }\n\n  private static parseError(json: StringDict<unknown>): string | undefined {\n    if (json) {\n      if (json.error && json.error_description) {\n        return `${json.error}: ${json.error_description}`;\n      }\n      if (json.code && json.message) {\n        return `${json.code}: ${json.message}`;\n      }\n    }\n    return undefined;\n  }\n\n  private static getUrl(\n    endpoint: ConfigurablePaths,\n    query?: StringDict<string | undefined>,\n    options?: ConfigOptions,\n  ): string {\n    const { realmPath, serverConfig } = Config.get(options);\n    const path = getEndpointPath(endpoint, realmPath, serverConfig.paths);\n    let url = resolve(serverConfig.baseUrl, path);\n    if (query) {\n      url += `?${stringify(query)}`;\n    }\n    return url;\n  }\n}\n\nexport default OAuth2Client;\nexport { GetAuthorizationUrlOptions, GetOAuth2TokensOptions, OAuth2Tokens, ResponseType };\n","import Config from '../config/index';\nimport { TokenStoreObject } from '../config/interfaces';\nimport IndexedDBWrapper from './indexed-db';\nimport LocalStorageWrapper from './local-storage';\nimport SessionStorageWrapper from './session-storage';\nimport { Tokens } from '../shared/interfaces';\n\n/**\n * Provides access to the token storage API.\n * The type of storage (localStorage, sessionStorage, etc) can be configured\n * through `tokenStore` object on the SDK configuration.\n */\nabstract class TokenStorage {\n  /**\n   * Gets stored tokens.\n   */\n  public static async get(): Promise<Tokens> {\n    const { clientId, tokenStore } = this.getClientConfig();\n\n    if (tokenStore === 'sessionStorage') {\n      return await SessionStorageWrapper.get(clientId);\n    } else if (tokenStore === 'localStorage') {\n      return await LocalStorageWrapper.get(clientId);\n    } else if (tokenStore === 'indexedDB') {\n      return await IndexedDBWrapper.get(clientId);\n    } else if (tokenStore && tokenStore.get) {\n      // User supplied token store\n      return await tokenStore.get(clientId);\n    }\n    // if tokenStore is undefined, default to previous behavior\n    return await IndexedDBWrapper.get(clientId);\n  }\n\n  /**\n   * Saves tokens.\n   */\n  public static async set(tokens: Tokens): Promise<void> {\n    const { clientId, tokenStore } = this.getClientConfig();\n\n    if (tokenStore === 'sessionStorage') {\n      return await SessionStorageWrapper.set(clientId, tokens);\n    } else if (tokenStore === 'localStorage') {\n      return await LocalStorageWrapper.set(clientId, tokens);\n    } else if (tokenStore === 'indexedDB') {\n      return await IndexedDBWrapper.set(clientId, tokens);\n    } else if (tokenStore && tokenStore.set) {\n      // User supplied token store\n      return await tokenStore.set(clientId, tokens);\n    }\n    // if tokenStore is undefined, default to previous behavior\n    return await IndexedDBWrapper.set(clientId, tokens);\n  }\n\n  /**\n   * Removes stored tokens.\n   */\n  public static async remove(): Promise<void> {\n    const { clientId, tokenStore } = this.getClientConfig();\n\n    if (tokenStore === 'sessionStorage') {\n      return await SessionStorageWrapper.remove(clientId);\n    } else if (tokenStore === 'localStorage') {\n      return await LocalStorageWrapper.remove(clientId);\n    } else if (tokenStore === 'indexedDB') {\n      return await IndexedDBWrapper.remove(clientId);\n    } else if (tokenStore && tokenStore.remove) {\n      // User supplied token store\n      return await tokenStore.remove(clientId);\n    }\n    // if tokenStore is undefined, default to previous behavior\n    return await IndexedDBWrapper.remove(clientId);\n  }\n\n  private static getClientConfig(): {\n    clientId: string;\n    tokenStore: TokenStoreObject | 'indexedDB' | 'sessionStorage' | 'localStorage' | undefined;\n  } {\n    const { clientId, tokenStore } = Config.get();\n    if (!clientId) {\n      throw new Error('clientId is required to manage token storage');\n    }\n    return { clientId, tokenStore };\n  }\n}\n\nexport default TokenStorage;\n","/**\n * Known errors that can occur during authentication.\n */\nenum ErrorCode {\n  BadRequest = 'BAD_REQUEST',\n  Timeout = 'TIMEOUT',\n  Unauthorized = 'UNAUTHORIZED',\n  Unknown = 'UNKNOWN',\n}\n\n/**\n * Types of callbacks directly supported by the SDK.\n */\nenum CallbackType {\n  BooleanAttributeInputCallback = 'BooleanAttributeInputCallback',\n  ChoiceCallback = 'ChoiceCallback',\n  ConfirmationCallback = 'ConfirmationCallback',\n  DeviceProfileCallback = 'DeviceProfileCallback',\n  HiddenValueCallback = 'HiddenValueCallback',\n  KbaCreateCallback = 'KbaCreateCallback',\n  MetadataCallback = 'MetadataCallback',\n  NameCallback = 'NameCallback',\n  PasswordCallback = 'PasswordCallback',\n  PollingWaitCallback = 'PollingWaitCallback',\n  ReCaptchaCallback = 'ReCaptchaCallback',\n  StringAttributeInputCallback = 'StringAttributeInputCallback',\n  TermsAndConditionsCallback = 'TermsAndConditionsCallback',\n  TextOutputCallback = 'TextOutputCallback',\n  ValidatedCreatePasswordCallback = 'ValidatedCreatePasswordCallback',\n  ValidatedCreateUsernameCallback = 'ValidatedCreateUsernameCallback',\n}\n\nexport { CallbackType, ErrorCode };\n","import { CallbackType } from '../auth/enums';\nimport { Callback, Step } from '../auth/interfaces';\nimport FRCallback from './callbacks';\nimport createCallback, { FRCallbackFactory } from './callbacks/factory';\nimport { StepType } from './enums';\nimport { AuthResponse } from './interfaces';\n\n/**\n * Represents a single step of an authentication tree.\n */\nclass FRStep implements AuthResponse {\n  /**\n   * The type of step.\n   */\n  public readonly type = StepType.Step;\n\n  /**\n   * The callbacks contained in this step.\n   */\n  public callbacks: FRCallback[] = [];\n\n  /**\n   * @param payload The raw payload returned by OpenAM\n   * @param callbackFactory A function that returns am implementation of FRCallback\n   */\n  constructor(public payload: Step, callbackFactory?: FRCallbackFactory) {\n    if (payload.callbacks) {\n      this.callbacks = this.convertCallbacks(payload.callbacks, callbackFactory);\n    }\n  }\n\n  /**\n   * Gets the first callback of the specified type in this step.\n   *\n   * @param type The type of callback to find.\n   */\n  public getCallbackOfType<T extends FRCallback>(type: CallbackType): T {\n    const callbacks = this.getCallbacksOfType<T>(type);\n    if (callbacks.length !== 1) {\n      throw new Error(`Expected 1 callback of type \"${type}\", but found ${callbacks.length}`);\n    }\n    return callbacks[0];\n  }\n\n  /**\n   * Gets all callbacks of the specified type in this step.\n   *\n   * @param type The type of callback to find.\n   */\n  public getCallbacksOfType<T extends FRCallback>(type: CallbackType): T[] {\n    return this.callbacks.filter((x) => x.getType() === type) as T[];\n  }\n\n  /**\n   * Sets the value of the first callback of the specified type in this step.\n   *\n   * @param type The type of callback to find.\n   * @param value The value to set for the callback.\n   */\n  public setCallbackValue(type: CallbackType, value: unknown): void {\n    const callbacks = this.getCallbacksOfType(type);\n    if (callbacks.length !== 1) {\n      throw new Error(`Expected 1 callback of type \"${type}\", but found ${callbacks.length}`);\n    }\n    callbacks[0].setInputValue(value);\n  }\n\n  /**\n   * Gets the step's description.\n   */\n  public getDescription(): string | undefined {\n    return this.payload.description;\n  }\n\n  /**\n   * Gets the step's header.\n   */\n  public getHeader(): string | undefined {\n    return this.payload.header;\n  }\n\n  /**\n   * Gets the step's stage.\n   */\n  public getStage(): string | undefined {\n    return this.payload.stage;\n  }\n\n  private convertCallbacks(\n    callbacks: Callback[],\n    callbackFactory?: FRCallbackFactory,\n  ): FRCallback[] {\n    const converted = callbacks.map((x: Callback) => {\n      // This gives preference to the provided factory and falls back to our default implementation\n      return (callbackFactory || createCallback)(x) || createCallback(x);\n    });\n    return converted;\n  }\n}\n\n/**\n * A function that can populate the provided authentication tree step.\n */\ntype FRStepHandler = (step: FRStep) => void;\n\nexport default FRStep;\nexport { FRStepHandler };\n","/** @hidden */\nconst DB_NAME = 'forgerock-sdk';\n\n/** @hidden */\nconst TOKEN_KEY = 'tokens';\n\nexport { DB_NAME, TOKEN_KEY };\n","/**\n * Helper class for generating verifier and challenge strings used for\n * Proof Key for Code Exchange (PKCE).\n */\nabstract class PKCE {\n  /**\n   * Creates a random verifier.\n   *\n   * @param size The length of the verifier (default 32 characters)\n   */\n  public static createVerifier(size = 32): string {\n    const array = new Uint8Array(size);\n    window.crypto.getRandomValues(array);\n    const verifier = this.base64UrlEncode(array);\n    return verifier;\n  }\n\n  /**\n   * Creates a SHA-256 hash of the verifier.\n   *\n   * @param verifier The verifier to hash\n   */\n  public static async createChallenge(verifier: string): Promise<string> {\n    const sha256 = await this.sha256(verifier);\n    const challenge = this.base64UrlEncode(sha256);\n    return challenge;\n  }\n\n  /**\n   * Creates a base64 encoded, URL-friendly version of the specified array.\n   *\n   * @param array The array of numbers to encode\n   */\n  public static base64UrlEncode(array: Uint8Array): string {\n    const numbers = Array.prototype.slice.call(array);\n    const ascii = window.btoa(String.fromCharCode.apply(null, numbers));\n    const urlEncoded = ascii.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n    return urlEncoded;\n  }\n\n  /**\n   * Creates a SHA-256 hash of the specified string.\n   *\n   * @param value The string to hash\n   */\n  public static async sha256(value: string): Promise<Uint8Array> {\n    const uint8Array = new TextEncoder().encode(value);\n    const hashBuffer = await window.crypto.subtle.digest('SHA-256', uint8Array);\n    const hashArray = new Uint8Array(hashBuffer);\n    return hashArray;\n  }\n}\n\nexport default PKCE;\n","import { ConfigOptions } from '../config';\nimport OAuth2Client, { OAuth2Tokens, ResponseType } from '../oauth2-client';\nimport { Tokens } from '../shared/interfaces';\nimport TokenStorage from '../token-storage';\nimport nonce from '../util/nonce';\nimport PKCE from '../util/pkce';\nimport { parseQuery } from '../util/url';\n\ninterface GetTokensOptions extends ConfigOptions {\n  forceRenew?: boolean;\n}\n\nabstract class TokenManager {\n  public static async getTokens(options?: GetTokensOptions): Promise<OAuth2Tokens> {\n    let tokens: Tokens;\n\n    // Try to use stored tokens, if possible\n    if (!options || !options.forceRenew) {\n      try {\n        tokens = await TokenStorage.get();\n        if (tokens) {\n          return tokens;\n        }\n      } catch (error) {\n        console.error('Failed to retrieve stored tokens', error);\n      }\n    }\n\n    const verifier = PKCE.createVerifier();\n    const state = nonce()().toString();\n    const authorizeUrlOptions = { ...options, responseType: ResponseType.Code, state, verifier };\n    const authorizeUrl = await OAuth2Client.getAuthorizeUrl(authorizeUrlOptions);\n\n    const parsedQuery = parseQuery(authorizeUrl);\n    if (parsedQuery.state !== state) {\n      throw new Error('State mismatch');\n    }\n    if (!parsedQuery.code || Array.isArray(parsedQuery.code)) {\n      throw new Error('Failed to acquire authorization code');\n    }\n\n    const authorizationCode = parsedQuery.code;\n    const getTokensOptions = { ...options, authorizationCode, verifier };\n    tokens = await OAuth2Client.getOAuth2Tokens(getTokensOptions);\n\n    try {\n      await TokenStorage.set(tokens);\n    } catch (error) {\n      console.error('Failed to store tokens', error);\n    }\n\n    return tokens;\n  }\n\n  public static async deleteTokens(): Promise<void> {\n    await TokenStorage.remove();\n  }\n}\n\nexport default TokenManager;\nexport { GetTokensOptions };\n","import Config, { ServerConfig } from '../config';\nimport { ActionTypes } from '../config/enums';\nimport { REQUESTED_WITH } from '../shared/constants';\nimport { StringDict } from '../shared/interfaces';\nimport { withTimeout } from '../util/timeout';\nimport { getEndpointPath, resolve, stringify } from '../util/url';\nimport { Step, StepOptions } from './interfaces';\nimport middlewareWrapper from '../util/middleware';\n\n/**\n * Provides direct access to the OpenAM authentication tree API.\n */\nabstract class Auth {\n  /**\n   * Gets the next step in the authentication tree.\n   *\n   * @param {Step} previousStep The previous step, including any required input.\n   * @param {StepOptions} options Configuration default overrides.\n   * @return {Step} The next step in the authentication tree.\n   */\n  public static async next(previousStep?: Step, options?: StepOptions): Promise<Step> {\n    const { realmPath, serverConfig, tree, type } = Config.get(options);\n    const query = options ? options.query : {};\n    const url = this.constructUrl(serverConfig, realmPath, tree, query);\n    const req = middlewareWrapper(\n      {\n        url: new URL(url),\n        init: this.configureRequest(previousStep),\n      },\n      previousStep ? ActionTypes.Authenticate : ActionTypes.StartAuthenticate,\n      {\n        tree,\n        type: type ? type : 'service',\n      },\n    );\n    const res = await withTimeout(fetch(req.url.toString(), req.init), serverConfig.timeout);\n    const json = await this.getResponseJson<Step>(res);\n    return json;\n  }\n\n  private static constructUrl(\n    serverConfig: ServerConfig,\n    realmPath?: string,\n    tree?: string,\n    query?: StringDict<string>,\n  ): string {\n    const treeParams = tree ? { authIndexType: 'service', authIndexValue: tree } : undefined;\n    const params: StringDict<string | undefined> = { ...query, ...treeParams };\n    const queryString = Object.keys(params).length > 0 ? `?${stringify(params)}` : '';\n    const path = getEndpointPath('authenticate', realmPath, serverConfig.paths);\n    const url = resolve(serverConfig.baseUrl, `${path}${queryString}`);\n    return url;\n  }\n\n  private static configureRequest(step?: Step): RequestInit {\n    const init: RequestInit = {\n      body: step ? JSON.stringify(step) : undefined,\n      credentials: 'include',\n      headers: {\n        accept: 'application/json',\n        'accept-api-version': 'protocol=1.0,resource=2.1',\n        'content-type': 'application/json',\n        'x-requested-with': REQUESTED_WITH,\n      },\n      method: 'POST',\n    };\n    return init;\n  }\n\n  private static async getResponseJson<T>(res: Response): Promise<T> {\n    const contentType = res.headers.get('content-type');\n    const isJson = contentType && contentType.indexOf('application/json') > -1;\n    const json = isJson ? await res.json() : {};\n    json.status = res.status;\n    json.ok = res.ok;\n    return json;\n  }\n}\n\nexport default Auth;\n","/** @hidden */\nconst REQUESTED_WITH = 'forgerock-sdk';\n\nexport { REQUESTED_WITH };\n","import { add, clear, remove } from './helpers';\nimport { CallbackContainer, FREvent, Listener } from './interfaces';\n\n/**\n * Event dispatcher for subscribing and publishing categorized events.\n */\nclass Dispatcher {\n  private callbacks: CallbackContainer = {};\n\n  /**\n   * Subscribes to an event type.\n   *\n   * @param type The event type\n   * @param listener The function to subscribe to events of this type\n   */\n  public addEventListener(type: string, listener: Listener): void {\n    add(this.callbacks, type, listener);\n  }\n\n  /**\n   * Unsubscribes from an event type.\n   *\n   * @param type The event type\n   * @param listener The function to unsubscribe from events of this type\n   */\n  public removeEventListener(type: string, listener: Listener): void {\n    remove(this.callbacks, type, listener);\n  }\n\n  /**\n   * Unsubscribes all listener functions to a single event type or all event types.\n   *\n   * @param type The event type, or all event types if not specified\n   */\n  public clearEventListeners(type?: string): void {\n    clear(this.callbacks, type);\n  }\n\n  /**\n   * Publishes an event.\n   *\n   * @param event The event object to publish\n   */\n  public dispatchEvent<T extends FREvent>(event: T): void {\n    if (!this.callbacks[event.type]) {\n      return;\n    }\n    for (const listener of this.callbacks[event.type]) {\n      listener(event);\n    }\n  }\n}\n\nexport default Dispatcher;\nexport { CallbackContainer, FREvent, Listener };\n","import Auth from '../auth/index';\nimport { StepOptions } from '../auth/interfaces';\nimport FRLoginFailure from './fr-login-failure';\nimport FRLoginSuccess from './fr-login-success';\nimport FRStep from './fr-step';\n\n/**\n * Provides access to the OpenAM authentication tree API.\n *\n * Call `FRAuth.next()` recursively.  At each step, check for session token or error, otherwise\n * populate the step's callbacks and call `next()` again.\n *\n * Example:\n *\n * ```js\n * async function nextStep(previousStep) {\n *   const thisStep = await FRAuth.next(previousStep);\n *\n *   switch (thisStep.type) {\n *     case StepType.LoginSuccess:\n *       const token = thisStep.getSessionToken();\n *       break;\n *     case StepType.LoginFailure:\n *       const detail = thisStep.getDetail();\n *       break;\n *     case StepType.Step:\n *       // Populate `thisStep` callbacks here, and then continue\n *       thisStep.setInputValue('foo');\n *       nextStep(thisStep);\n *       break;\n *   }\n * }\n * ```\n */\nabstract class FRAuth {\n  /**\n   * Requests the next step in the authentication tree.\n   *\n   * @param previousStep The previous step with its callback values populated\n   * @param options Configuration overrides\n   * @return The next step in the authentication tree\n   */\n  public static async next(\n    previousStep?: FRStep,\n    options?: StepOptions,\n  ): Promise<FRStep | FRLoginSuccess | FRLoginFailure> {\n    const nextPayload = await Auth.next(previousStep ? previousStep.payload : undefined, options);\n\n    if (nextPayload.authId) {\n      // If there's an authId, tree is has not been completed\n      const callbackFactory = options ? options.callbackFactory : undefined;\n      return new FRStep(nextPayload, callbackFactory);\n    }\n\n    if (!nextPayload.authId && nextPayload.ok) {\n      // If there's no authId, and the response is OK, tree is complete\n      return new FRLoginSuccess(nextPayload);\n    }\n\n    // If there's no authId, and the response is no OK, tree has failure\n    return new FRLoginFailure(nextPayload);\n  }\n}\n\nexport default FRAuth;\n","import FRPolicy from '../fr-policy';\nimport { MessageCreator, ProcessedPropertyError } from '../fr-policy/interfaces';\nimport { Step } from '../auth/interfaces';\nimport { StepType } from './enums';\nimport { AuthResponse, FailureDetail } from './interfaces';\n\nclass FRLoginFailure implements AuthResponse {\n  /**\n   * The type of step.\n   */\n  public readonly type = StepType.LoginFailure;\n\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Step) {}\n\n  /**\n   * Gets the error code.\n   */\n  public getCode(): number {\n    return Number(this.payload.code);\n  }\n\n  /**\n   * Gets the failure details.\n   */\n  public getDetail(): FailureDetail | undefined {\n    return this.payload.detail;\n  }\n\n  /**\n   * Gets the failure message.\n   */\n  public getMessage(): string | undefined {\n    return this.payload.message;\n  }\n\n  /**\n   * Gets processed failure message.\n   */\n  public getProcessedMessage(messageCreator?: MessageCreator): ProcessedPropertyError[] {\n    return FRPolicy.parseErrors(this.payload, messageCreator);\n  }\n\n  /**\n   * Gets the failure reason.\n   */\n  public getReason(): string | undefined {\n    return this.payload.reason;\n  }\n}\n\nexport default FRLoginFailure;\n","import { FailedPolicyRequirement, PolicyRequirement, Step } from '../auth/interfaces';\nimport { PolicyKey } from './enums';\nimport { MessageCreator, ProcessedPropertyError } from './interfaces';\nimport defaultMessageCreator from './message-creator';\n\n/**\n * Utility for processing policy failures into human readable messages.\n *\n * Example:\n *\n * ```js\n * // Create message overrides and extensions as needed\n * const messageCreator = {\n *   [PolicyKey.unique]: (property: string) => (\n *     `this is a custom message for \"UNIQUE\" policy of ${property}`\n *   ),\n *   CUSTOM_POLICY: (property: string, params: any) => (\n *     `this is a custom message for \"${params.policyRequirement}\" policy of ${property}`\n *   ),\n * };\n *\n * const thisStep = await FRAuth.next(previousStep);\n *\n * if (thisStep.type === StepType.LoginFailure) {\n *   const messagesStepMethod = thisStep.getProcessedMessage(messageCreator);\n *   const messagesClassMethod = FRPolicy.parseErrors(thisStep, messageCreator)\n * }\n */\nabstract class FRPolicy {\n  /**\n   * Parses policy errors and generates human readable error messages.\n   *\n   * @param {Step} err The step containing the error.\n   * @param {MessageCreator} messageCreator\n   * Extensible and overridable custom error messages for policy failures.\n   * @return {ProcessedPropertyError[]} Array of objects containing all processed policy errors.\n   */\n  public static parseErrors(\n    err: Partial<Step>,\n    messageCreator?: MessageCreator,\n  ): ProcessedPropertyError[] {\n    const errors: ProcessedPropertyError[] = [];\n    if (err.detail && err.detail.failedPolicyRequirements) {\n      err.detail.failedPolicyRequirements.map((x) => {\n        errors.push.apply(errors, [\n          {\n            detail: x,\n            messages: this.parseFailedPolicyRequirement(x, messageCreator),\n          },\n        ]);\n      });\n    }\n    return errors;\n  }\n\n  /**\n   * Parses a failed policy and returns a string array of error messages.\n   *\n   * @param {FailedPolicyRequirement} failedPolicy The detail data of the failed policy.\n   * @param {MessageCreator} customMessage\n   * Extensible and overridable custom error messages for policy failures.\n   * @return {string[]} Array of strings with all processed policy errors.\n   */\n  public static parseFailedPolicyRequirement(\n    failedPolicy: FailedPolicyRequirement,\n    messageCreator?: MessageCreator,\n  ): string[] {\n    const errors: string[] = [];\n    failedPolicy.policyRequirements.map((policyRequirement) => {\n      errors.push(\n        this.parsePolicyRequirement(failedPolicy.property, policyRequirement, messageCreator),\n      );\n    });\n    return errors;\n  }\n\n  /**\n   * Parses a policy error into a human readable error message.\n   *\n   * @param {string} property The property with the policy failure.\n   * @param {PolicyRequirement} policy The policy failure data.\n   * @param {MessageCreator} customMessage\n   * Extensible and overridable custom error messages for policy failures.\n   * @return {string} Human readable error message.\n   */\n  public static parsePolicyRequirement(\n    property: string,\n    policy: PolicyRequirement,\n    messageCreator: MessageCreator = {},\n  ): string {\n    // AM is returning policy requirement failures as JSON strings\n    const policyObject = typeof policy === 'string' ? JSON.parse(policy) : { ...policy };\n\n    const policyRequirement = policyObject.policyRequirement;\n\n    // Determine which message creator function to use\n    const effectiveMessageCreator =\n      messageCreator[policyRequirement] ||\n      defaultMessageCreator[policyRequirement] ||\n      defaultMessageCreator[PolicyKey.UnknownPolicy];\n\n    // Flatten the parameters and create the message\n    const params = policyObject.params\n      ? { ...policyObject.params, policyRequirement }\n      : { policyRequirement };\n    const message = effectiveMessageCreator(property, params);\n\n    return message;\n  }\n}\n\nexport default FRPolicy;\nexport { PolicyKey, MessageCreator, ProcessedPropertyError };\n","enum PolicyKey {\n  CannotContainCharacters = 'CANNOT_CONTAIN_CHARACTERS',\n  CannotContainDuplicates = 'CANNOT_CONTAIN_DUPLICATES',\n  CannotContainOthers = 'CANNOT_CONTAIN_OTHERS',\n  LeastCapitalLetters = 'AT_LEAST_X_CAPITAL_LETTERS',\n  LeastNumbers = 'AT_LEAST_X_NUMBERS',\n  MatchRegexp = 'MATCH_REGEXP',\n  MaximumLength = 'MAX_LENGTH',\n  MaximumNumber = 'MAXIMUM_NUMBER_VALUE',\n  MinimumLength = 'MIN_LENGTH',\n  MinimumNumber = 'MINIMUM_NUMBER_VALUE',\n  Required = 'REQUIRED',\n  Unique = 'UNIQUE',\n  UnknownPolicy = 'UNKNOWN_POLICY',\n  ValidArrayItems = 'VALID_ARRAY_ITEMS',\n  ValidDate = 'VALID_DATE',\n  ValidEmailAddress = 'VALID_EMAIL_ADDRESS_FORMAT',\n  ValidNameFormat = 'VALID_NAME_FORMAT',\n  ValidNumber = 'VALID_NUMBER',\n  ValidPhoneFormat = 'VALID_PHONE_FORMAT',\n  ValidQueryFilter = 'VALID_QUERY_FILTER',\n  ValidType = 'VALID_TYPE',\n}\n\nexport { PolicyKey };\n","import { plural } from '../util/strings';\nimport { PolicyKey } from './enums';\nimport { getProp } from './helpers';\nimport { MessageCreator } from './interfaces';\n\nconst defaultMessageCreator: MessageCreator = {\n  [PolicyKey.CannotContainCharacters]: (property: string, params?: { forbiddenChars?: string }) => {\n    const forbiddenChars = getProp<string>(params, 'forbiddenChars', '');\n    return `${property} must not contain following characters: \"${forbiddenChars}\"`;\n  },\n  [PolicyKey.CannotContainDuplicates]: (property: string, params?: { duplicateValue?: string }) => {\n    const duplicateValue = getProp<string>(params, 'duplicateValue', '');\n    return `${property}  must not contain duplicates: \"${duplicateValue}\"`;\n  },\n  [PolicyKey.CannotContainOthers]: (property: string, params?: { disallowedFields?: string }) => {\n    const disallowedFields = getProp<string>(params, 'disallowedFields', '');\n    return `${property} must not contain: \"${disallowedFields}\"`;\n  },\n  [PolicyKey.LeastCapitalLetters]: (property: string, params?: { numCaps?: number }) => {\n    const numCaps = getProp<number>(params, 'numCaps', 0);\n    return `${property} must contain at least ${numCaps} capital ${plural(numCaps, 'letter')}`;\n  },\n  [PolicyKey.LeastNumbers]: (property: string, params?: { numNums?: number }) => {\n    const numNums = getProp<number>(params, 'numNums', 0);\n    return `${property} must contain at least ${numNums} numeric ${plural(numNums, 'value')}`;\n  },\n  [PolicyKey.MatchRegexp]: (property: string) => `${property} has failed the \"MATCH_REGEXP\" policy`,\n  [PolicyKey.MaximumLength]: (property: string, params?: { maxLength?: number }) => {\n    const maxLength = getProp<number>(params, 'maxLength', 0);\n    return `${property} must be at most ${maxLength} ${plural(maxLength, 'character')}`;\n  },\n  [PolicyKey.MaximumNumber]: (property: string) =>\n    `${property} has failed the \"MAXIMUM_NUMBER_VALUE\" policy`,\n  [PolicyKey.MinimumLength]: (property: string, params?: { minLength?: number }) => {\n    const minLength = getProp<number>(params, 'minLength', 0);\n    return `${property} must be at least ${minLength} ${plural(minLength, 'character')}`;\n  },\n  [PolicyKey.MinimumNumber]: (property: string) =>\n    `${property} has failed the \"MINIMUM_NUMBER_VALUE\" policy`,\n  [PolicyKey.Required]: (property: string) => `${property} is required`,\n  [PolicyKey.Unique]: (property: string) => `${property} must be unique`,\n  [PolicyKey.UnknownPolicy]: (property: string, params?: { policyRequirement?: string }) => {\n    const policyRequirement = getProp<string>(params, 'policyRequirement', 'Unknown');\n    return `${property}: Unknown policy requirement \"${policyRequirement}\"`;\n  },\n  [PolicyKey.ValidArrayItems]: (property: string) =>\n    `${property} has failed the \"VALID_ARRAY_ITEMS\" policy`,\n  [PolicyKey.ValidDate]: (property: string) => `${property} has an invalid date`,\n  [PolicyKey.ValidEmailAddress]: (property: string) => `${property} has an invalid email address`,\n  [PolicyKey.ValidNameFormat]: (property: string) => `${property} has an invalid name format`,\n  [PolicyKey.ValidNumber]: (property: string) => `${property} has an invalid number`,\n  [PolicyKey.ValidPhoneFormat]: (property: string) => `${property} has an invalid phone number`,\n  [PolicyKey.ValidQueryFilter]: (property: string) =>\n    `${property} has failed the \"VALID_QUERY_FILTER\" policy`,\n  [PolicyKey.ValidType]: (property: string) => `${property} has failed the \"VALID_TYPE\" policy`,\n};\n\nexport default defaultMessageCreator;\n","import { Step } from '../auth/interfaces';\nimport { StepType } from './enums';\nimport { AuthResponse } from './interfaces';\n\nclass FRLoginSuccess implements AuthResponse {\n  /**\n   * The type of step.\n   */\n  public readonly type = StepType.LoginSuccess;\n\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Step) {}\n\n  /**\n   * Gets the step's realm.\n   */\n  public getRealm(): string | undefined {\n    return this.payload.realm;\n  }\n\n  /**\n   * Gets the step's session token.\n   */\n  public getSessionToken(): string | undefined {\n    return this.payload.tokenId;\n  }\n\n  /**\n   * Gets the step's success URL.\n   */\n  public getSuccessUrl(): string | undefined {\n    return this.payload.successUrl;\n  }\n}\n\nexport default FRLoginSuccess;\n","import FRCallback from '.';\nimport { Callback, PolicyRequirement } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect attributes.\n *\n * @typeparam T Maps to StringAttributeInputCallback and BooleanAttributeInputCallback, respectively\n */\nclass AttributeInputCallback<T extends string | boolean> extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the attribute name.\n   */\n  public getName(): string {\n    return this.getOutputByName<string>('name', '');\n  }\n\n  /**\n   * Gets the attribute prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Gets whether the attribute is required.\n   */\n  public isRequired(): boolean {\n    return this.getOutputByName<boolean>('required', false);\n  }\n\n  /**\n   * Gets the callback's failed policies.\n   */\n  public getFailedPolicies(): PolicyRequirement[] {\n    return this.getOutputByName<PolicyRequirement[]>('failedPolicies', []);\n  }\n\n  /**\n   * Gets the callback's applicable policies.\n   */\n  public getPolicies(): string[] {\n    return this.getOutputByName<string[]>('policies', []);\n  }\n\n  /**\n   * Sets the attribute's value.\n   */\n  public setValue(value: T): void {\n    this.setInputValue(value);\n  }\n}\n\nexport default AttributeInputCallback;\n","import FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect an answer to a choice.\n */\nclass ChoiceCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the choice's prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Gets the choice's default answer.\n   */\n  public getDefaultChoice(): number {\n    return this.getOutputByName<number>('defaultChoice', 0);\n  }\n\n  /**\n   * Gets the choice's possible answers.\n   */\n  public getChoices(): string[] {\n    return this.getOutputByName<string[]>('choices', []);\n  }\n\n  /**\n   * Sets the choice's answer by index position.\n   */\n  public setChoiceIndex(index: number): void {\n    const length = this.getChoices().length;\n    if (index < 0 || index > length - 1) {\n      throw new Error(`${index} is out of bounds`);\n    }\n    this.setInputValue(index);\n  }\n\n  /**\n   * Sets the choice's answer by value.\n   */\n  public setChoiceValue(value: string): void {\n    const index = this.getChoices().indexOf(value);\n    if (index === -1) {\n      throw new Error(`\"${value}\" is not a valid choice`);\n    }\n    this.setInputValue(index);\n  }\n}\n\nexport default ChoiceCallback;\n","import FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect a confirmation to a message.\n */\nclass ConfirmationCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the index position of the confirmation's default answer.\n   */\n  public getDefaultOption(): number {\n    return Number(this.getOutputByName<number>('defaultOption', 0));\n  }\n\n  /**\n   * Gets the confirmation's message type.\n   */\n  public getMessageType(): number {\n    return Number(this.getOutputByName<number>('messageType', 0));\n  }\n\n  /**\n   * Gets the confirmation's possible answers.\n   */\n  public getOptions(): string[] {\n    return this.getOutputByName<string[]>('options', []);\n  }\n\n  /**\n   * Gets the confirmation's option type.\n   */\n  public getOptionType(): number {\n    return Number(this.getOutputByName<number>('optionType', 0));\n  }\n\n  /**\n   * Gets the confirmation's prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Set option index.\n   */\n  public setOptionIndex(index: number): void {\n    if (index !== 0 && index !== 1) {\n      throw new Error(`\"${index}\" is not a valid choice`);\n    }\n    this.setInputValue(index);\n  }\n\n  /**\n   * Set option value.\n   */\n  public setOptionValue(value: string): void {\n    const index = this.getOptions().indexOf(value);\n    if (index === -1) {\n      throw new Error(`\"${value}\" is not a valid choice`);\n    }\n    this.setInputValue(index);\n  }\n}\n\nexport default ConfirmationCallback;\n","import FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\nimport { DeviceProfileData } from '../../fr-device/interfaces';\n\n/**\n * Represents a callback used to collect device profile data.\n */\nclass DeviceProfileCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback's data.\n   */\n  public getMessage(): string {\n    return this.getOutputByName<string>('message', '');\n  }\n\n  /**\n   * Does callback require metadata?\n   */\n  public isMetadataRequired(): boolean {\n    return this.getOutputByName<boolean>('metadata', false);\n  }\n\n  /**\n   * Does callback require location data?\n   */\n  public isLocationRequired(): boolean {\n    return this.getOutputByName<boolean>('location', false);\n  }\n\n  /**\n   * Sets the profile.\n   */\n  public setProfile(profile: DeviceProfileData): void {\n    this.setInputValue(JSON.stringify(profile));\n  }\n}\n\nexport default DeviceProfileCallback;\n","import FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect information indirectly from the user.\n */\nclass HiddenValueCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n}\n\nexport default HiddenValueCallback;\n","import FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect KBA-style security questions and answers.\n */\nclass KbaCreateCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Gets the callback's list of pre-defined security questions.\n   */\n  public getPredefinedQuestions(): string[] {\n    return this.getOutputByName<string[]>('predefinedQuestions', []);\n  }\n\n  /**\n   * Sets the callback's security question.\n   */\n  public setQuestion(question: string): void {\n    this.setValue('question', question);\n  }\n\n  /**\n   * Sets the callback's security question answer.\n   */\n  public setAnswer(answer: string): void {\n    this.setValue('answer', answer);\n  }\n\n  private setValue(type: 'question' | 'answer', value: string): void {\n    if (!this.payload.input) {\n      throw new Error('KBA payload is missing input');\n    }\n\n    const input = this.payload.input.find((x) => x.name.endsWith(type));\n    if (!input) {\n      throw new Error(`No input has name ending in \"${type}\"`);\n    }\n    input.value = value;\n  }\n}\n\nexport default KbaCreateCallback;\n","import FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to deliver and collect miscellaneous data.\n */\nclass MetadataCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback's data.\n   */\n  public getData<T>(): T {\n    return this.getOutputByName<T>('data', {} as T);\n  }\n}\n\nexport default MetadataCallback;\n","import FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect a username.\n */\nclass NameCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback's prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Sets the username.\n   */\n  public setName(name: string): void {\n    this.setInputValue(name);\n  }\n}\n\nexport default NameCallback;\n","import FRCallback from '.';\nimport { Callback, PolicyRequirement } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect a password.\n */\nclass PasswordCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback's failed policies.\n   */\n  public getFailedPolicies(): PolicyRequirement[] {\n    return this.getOutputByName<PolicyRequirement[]>('failedPolicies', []);\n  }\n\n  /**\n   * Gets the callback's applicable policies.\n   */\n  public getPolicies(): string[] {\n    return this.getOutputByName<string[]>('policies', []);\n  }\n\n  /**\n   * Gets the callback's prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Sets the password.\n   */\n  public setPassword(password: string): void {\n    this.setInputValue(password);\n  }\n}\n\nexport default PasswordCallback;\n","import FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to instruct the system to poll while a backend process completes.\n */\nclass PollingWaitCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the message to display while polling.\n   */\n  public getMessage(): string {\n    return this.getOutputByName<string>('message', '');\n  }\n\n  /**\n   * Gets the polling interval in seconds.\n   */\n  public getWaitTime(): number {\n    return Number(this.getOutputByName<number>('waitTime', 0));\n  }\n}\n\nexport default PollingWaitCallback;\n","import FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to integrate reCAPTCHA.\n */\nclass ReCaptchaCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the reCAPTCHA site key.\n   */\n  public getSiteKey(): string {\n    return this.getOutputByName<string>('recaptchaSiteKey', '');\n  }\n\n  /**\n   * Sets the reCAPTCHA result.\n   */\n  public setResult(result: string): void {\n    this.setInputValue(result);\n  }\n}\n\nexport default ReCaptchaCallback;\n","import FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect acceptance of terms and conditions.\n */\nclass TermsAndConditionsCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the terms and conditions content.\n   */\n  public getTerms(): string {\n    return this.getOutputByName<string>('terms', '');\n  }\n\n  /**\n   * Gets the version of the terms and conditions.\n   */\n  public getVersion(): string {\n    return this.getOutputByName<string>('version', '');\n  }\n\n  /**\n   * Gets the date of the terms and conditions.\n   */\n  public getCreateDate(): Date {\n    const date = this.getOutputByName<string>('createDate', '');\n    return new Date(date);\n  }\n\n  /**\n   * Sets the callback's acceptance.\n   */\n  public setAccepted(accepted = true): void {\n    this.setInputValue(accepted);\n  }\n}\n\nexport default TermsAndConditionsCallback;\n","import FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to display a message.\n */\nclass TextOutputCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the message content.\n   */\n  public getMessage(): string {\n    return this.getOutputByName<string>('message', '');\n  }\n\n  /**\n   * Gets the message type.\n   */\n  public getMessageType(): string {\n    return this.getOutputByName<string>('messageType', '');\n  }\n}\n\nexport default TextOutputCallback;\n","import FRCallback from '.';\nimport { Callback, PolicyRequirement } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect a valid platform password.\n */\nclass ValidatedCreatePasswordCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback's failed policies.\n   */\n  public getFailedPolicies(): PolicyRequirement[] {\n    return this.getOutputByName<PolicyRequirement[]>('failedPolicies', []);\n  }\n\n  /**\n   * Gets the callback's applicable policies.\n   */\n  public getPolicies(): string[] {\n    return this.getOutputByName<string[]>('policies', []);\n  }\n\n  /**\n   * Gets the callback's prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Gets whether the password is required.\n   */\n  public isRequired(): boolean {\n    return this.getOutputByName<boolean>('required', false);\n  }\n\n  /**\n   * Sets the callback's password.\n   */\n  public setPassword(password: string): void {\n    this.setInputValue(password);\n  }\n}\n\nexport default ValidatedCreatePasswordCallback;\n","import FRCallback from '.';\nimport { Callback, PolicyRequirement } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect a valid platform username.\n */\nclass ValidatedCreateUsernameCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback's prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Gets the callback's failed policies.\n   */\n  public getFailedPolicies(): PolicyRequirement[] {\n    return this.getOutputByName<PolicyRequirement[]>('failedPolicies', []);\n  }\n\n  /**\n   * Gets the callback's applicable policies.\n   */\n  public getPolicies(): string[] {\n    return this.getOutputByName<string[]>('policies', []);\n  }\n\n  /**\n   * Gets whether the username is required.\n   */\n  public isRequired(): boolean {\n    return this.getOutputByName<boolean>('required', false);\n  }\n\n  /**\n   * Sets the callback's username.\n   */\n  public setName(name: string): void {\n    this.setInputValue(name);\n  }\n}\n\nexport default ValidatedCreateUsernameCallback;\n","/** @hidden */\nfunction isOkOr4xx(response: Response): boolean {\n  return response.ok || Math.floor(response.status / 100) === 4;\n}\n\nexport { isOkOr4xx };\n","/**\n * Returns a factory function to produce numbers intended for one-time use.\n *\n * @param length The number of digits to generate\n */\nfunction nonce(length = 15): () => number {\n  let last = -1;\n  let repeat = 0;\n\n  if (length < 4 || length > 15) {\n    throw new Error('Invalid nonce length');\n  }\n\n  return (): number => {\n    const now = Math.pow(10, 2) * +new Date();\n\n    if (now === last) {\n      repeat++;\n    } else {\n      repeat = 0;\n      last = now;\n    }\n\n    const s = (now + repeat).toString();\n    return +s.substr(s.length - length);\n  };\n}\n\nexport default nonce;\n","import OAuth2Client from '../oauth2-client';\n\n/**\n * Provides access to the current user's profile.\n */\nabstract class UserManager {\n  /**\n   * Gets the current user's profile.\n   */\n  public static getCurrentUser(): Promise<unknown> {\n    return OAuth2Client.getUserInfo();\n  }\n}\n\nexport default UserManager;\n","import { ParsedCredential, ResponseCredential } from './interfaces';\n\nfunction ensureArray(arr: RegExpMatchArray | null): string[] {\n  return arr || [];\n}\n\nfunction getClientDataJson(credential: ResponseCredential): string {\n  // https://goo.gl/yabPex - To future-proof, we'll pass along whatever the browser\n  // gives us and let AM disregard randomly-injected properties\n  const uint8Array = new Uint8Array(credential.response.clientDataJSON);\n  const txtDecoder = new TextDecoder();\n\n  const json = txtDecoder.decode(uint8Array);\n  return json;\n}\n\nfunction getIndexOne(arr: RegExpMatchArray | null): string {\n  return arr ? arr[1] : '';\n}\n\n// TODO: Remove this once AM is providing fully-serialized JSON\nfunction parseCredentials(value: string): ParsedCredential[] {\n  try {\n    const creds = value\n      .split('}')\n      .filter((x) => !!x && x !== ']')\n      .map((x) => {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const idArray = parseNumberArray(x);\n        return {\n          id: new Int8Array(idArray).buffer,\n          type: 'public-key' as PublicKeyCredentialType,\n        };\n      });\n    return creds;\n  } catch (error) {\n    throw new Error('Failed to parse credentials');\n  }\n}\n\nfunction parseNumberArray(value: string): number[] {\n  const matches = /new Int8Array\\((.+)\\)/.exec(value);\n  if (matches === null || matches.length < 2) {\n    return [];\n  }\n  return JSON.parse(matches[1]);\n}\n\nfunction parsePubKeyArray(value: string | unknown[]): PublicKeyCredentialParameters[] | undefined {\n  if (!value) {\n    return undefined;\n  }\n  if (Array.isArray(value)) {\n    return value as PublicKeyCredentialParameters[];\n  }\n  if (typeof value !== 'string') {\n    return undefined;\n  }\n  if (value && value[0] === '[') {\n    return JSON.parse(value);\n  }\n  value = value.replace(/(\\w+):/g, '\"$1\":');\n  return JSON.parse(`[${value}]`);\n}\n\nfunction parseAllowCredentialsArray(\n  value: string | unknown[],\n): PublicKeyCredentialDescriptor[] | undefined {\n  if (!value) {\n    return undefined;\n  }\n  if (Array.isArray(value)) {\n    return value as PublicKeyCredentialDescriptor[];\n  }\n  if (typeof value !== 'string') {\n    return undefined;\n  }\n  if (value && value[0] === '[') {\n    return JSON.parse(value);\n  }\n  value = value.replace(/(\\w+):/g, '\"$1\":');\n  return JSON.parse(`[${value}]`);\n}\n\n/**\n * AM is currently serializing RP as one of the following formats, depending on\n * whether RP ID has been configured:\n *   \"relyingPartyId\":\"\"\n *   \"relyingPartyId\":\"rpId: \\\"foo\\\",\"\n * This regex handles both formats, but should be removed once AM is fixed.\n */\nfunction parseRelyingPartyId(relyingPartyId: string): string {\n  if (relyingPartyId.includes('rpId')) {\n    return relyingPartyId.replace(/rpId: \"(.+)\",/, '$1');\n  } else {\n    return relyingPartyId.replace(/id: \"(.+)\",/, '$1');\n  }\n}\n\nexport {\n  ensureArray,\n  getClientDataJson,\n  getIndexOne,\n  parseCredentials,\n  parseNumberArray,\n  parseAllowCredentialsArray,\n  parsePubKeyArray,\n  parseRelyingPartyId,\n};\n","import Auth from './auth';\nimport { CallbackType, ErrorCode } from './auth/enums';\nimport { Callback, NameValue, PolicyRequirement, Step, StepDetail } from './auth/interfaces';\nimport Config, { ConfigOptions, ValidConfigOptions } from './config';\nimport Dispatcher, { CallbackContainer, FREvent, Listener } from './event';\nimport FRAuth from './fr-auth';\nimport FRCallback from './fr-auth/callbacks';\nimport AttributeInputCallback from './fr-auth/callbacks/attribute-input-callback';\nimport ChoiceCallback from './fr-auth/callbacks/choice-callback';\nimport ConfirmationCallback from './fr-auth/callbacks/confirmation-callback';\nimport DeviceProfileCallback from './fr-auth/callbacks/device-profile-callback';\nimport { FRCallbackFactory } from './fr-auth/callbacks/factory';\nimport HiddenValueCallback from './fr-auth/callbacks/hidden-value-callback';\nimport KbaCreateCallback from './fr-auth/callbacks/kba-create-callback';\nimport MetadataCallback from './fr-auth/callbacks/metadata-callback';\nimport NameCallback from './fr-auth/callbacks/name-callback';\nimport PasswordCallback from './fr-auth/callbacks/password-callback';\nimport PollingWaitCallback from './fr-auth/callbacks/polling-wait-callback';\nimport ReCaptchaCallback from './fr-auth/callbacks/recaptcha-callback';\nimport TermsAndConditionsCallback from './fr-auth/callbacks/terms-and-conditions-callback';\nimport TextOutputCallback from './fr-auth/callbacks/text-output-callback';\n// eslint-disable-next-line max-len\nimport ValidatedCreatePasswordCallback from './fr-auth/callbacks/validated-create-password-callback';\n// eslint-disable-next-line max-len\nimport ValidatedCreateUsernameCallback from './fr-auth/callbacks/validated-create-username-callback';\nimport { StepType } from './fr-auth/enums';\nimport FRLoginFailure from './fr-auth/fr-login-failure';\nimport FRLoginSuccess from './fr-auth/fr-login-success';\nimport FRStep, { FRStepHandler } from './fr-auth/fr-step';\nimport { AuthResponse, FailureDetail } from './fr-auth/interfaces';\nimport FRDevice from './fr-device';\nimport FRPolicy, { MessageCreator, PolicyKey, ProcessedPropertyError } from './fr-policy';\nimport defaultMessageCreator from './fr-policy/message-creator';\nimport FRUI from './fr-ui';\nimport FRUser from './fr-user';\nimport FRWebAuthn, {\n  RelyingParty,\n  WebAuthnAuthenticationMetadata,\n  WebAuthnCallbacks,\n  WebAuthnOutcome,\n  WebAuthnRegistrationMetadata,\n  WebAuthnStepType,\n} from './fr-webauthn';\nimport HttpClient from './http-client';\nimport OAuth2Client, {\n  GetAuthorizationUrlOptions,\n  GetOAuth2TokensOptions,\n  OAuth2Tokens,\n  ResponseType,\n} from './oauth2-client';\nimport SessionManager from './session-manager';\nimport { Tokens } from './shared/interfaces';\nimport TokenManager, { GetTokensOptions } from './token-manager';\nimport TokenStorage from './token-storage';\nimport UserManager from './user-manager';\nimport Deferred from './util/deferred';\nimport nonce from './util/nonce';\nimport PKCE from './util/pkce';\nimport LocalStorage from './util/storage';\n\nexport {\n  defaultMessageCreator,\n  nonce,\n  AttributeInputCallback,\n  Auth,\n  AuthResponse,\n  Callback,\n  CallbackContainer,\n  CallbackType,\n  ChoiceCallback,\n  Config,\n  ConfigOptions,\n  ConfirmationCallback,\n  Deferred,\n  DeviceProfileCallback,\n  Dispatcher,\n  ErrorCode,\n  FailureDetail,\n  FRAuth,\n  FRCallback,\n  FRCallbackFactory,\n  FRDevice,\n  FREvent,\n  FRLoginFailure,\n  FRLoginSuccess,\n  FRPolicy,\n  FRStep,\n  FRStepHandler,\n  FRUI,\n  FRUser,\n  FRWebAuthn,\n  GetAuthorizationUrlOptions,\n  GetOAuth2TokensOptions,\n  GetTokensOptions,\n  HiddenValueCallback,\n  HttpClient,\n  KbaCreateCallback,\n  Listener,\n  LocalStorage,\n  MessageCreator,\n  MetadataCallback,\n  NameCallback,\n  NameValue,\n  OAuth2Client,\n  OAuth2Tokens,\n  PasswordCallback,\n  PKCE,\n  PolicyKey,\n  PolicyRequirement,\n  PollingWaitCallback,\n  ProcessedPropertyError,\n  ReCaptchaCallback,\n  RelyingParty,\n  ResponseType,\n  SessionManager,\n  Step,\n  StepDetail,\n  StepType,\n  TermsAndConditionsCallback,\n  TextOutputCallback,\n  TokenManager,\n  Tokens,\n  TokenStorage,\n  UserManager,\n  ValidatedCreatePasswordCallback,\n  ValidatedCreateUsernameCallback,\n  ValidConfigOptions,\n  WebAuthnAuthenticationMetadata,\n  WebAuthnCallbacks,\n  WebAuthnOutcome,\n  WebAuthnRegistrationMetadata,\n  WebAuthnStepType,\n};\n","/** @hidden */\nconst DEFAULT_TIMEOUT = 60 * 1000;\n\nexport { DEFAULT_TIMEOUT };\n","/** @hidden */\nfunction getRealmUrlPath(realmPath?: string): string {\n  // Split the path and scrub segments\n  const names = (realmPath || '')\n    .split('/')\n    .map((x) => x.trim())\n    .filter((x) => x !== '');\n\n  // Ensure 'root' is the first realm\n  if (names[0] !== 'root') {\n    names.unshift('root');\n  }\n\n  // Concatenate into a URL path\n  const urlPath = names.map((x) => `realms/${x}`).join('/');\n  return urlPath;\n}\n\nexport { getRealmUrlPath };\n","import { CallbackContainer, Listener } from './interfaces';\n\n/** @hidden */\nfunction add(container: CallbackContainer, type: string, listener: Listener): void {\n  container[type] = container[type] || [];\n  if (container[type].indexOf(listener) < 0) {\n    container[type].push(listener);\n  }\n}\n\n/** @hidden */\nfunction remove(container: CallbackContainer, type: string, listener: Listener): void {\n  if (!container[type]) {\n    return;\n  }\n  const index = container[type].indexOf(listener);\n  if (index >= 0) {\n    container[type].splice(index, 1);\n  }\n}\n\n/** @hidden */\nfunction clear(container: CallbackContainer, type?: string): void {\n  Object.keys(container).forEach((k: string) => {\n    if (!type || k === type) {\n      delete container[k];\n    }\n  });\n}\n\nexport { add, clear, remove };\n","/** @hidden */\nexport function plural(n: number, singularText: string, pluralText?: string): string {\n  if (n === 1) {\n    return singularText;\n  }\n  return pluralText !== undefined ? pluralText : singularText + 's';\n}\n","function getProp<T>(obj: { [key: string]: unknown } | undefined, prop: string, defaultValue: T): T {\n  if (!obj || obj[prop] === undefined) {\n    return defaultValue;\n  }\n  return obj[prop] as T;\n}\n\nexport { getProp };\n","import FRCallback from '.';\nimport { CallbackType } from '../../auth/enums';\nimport { Callback } from '../../auth/interfaces';\nimport AttributeInputCallback from './attribute-input-callback';\nimport ChoiceCallback from './choice-callback';\nimport ConfirmationCallback from './confirmation-callback';\nimport DeviceProfileCallback from './device-profile-callback';\nimport HiddenValueCallback from './hidden-value-callback';\nimport KbaCreateCallback from './kba-create-callback';\nimport MetadataCallback from './metadata-callback';\nimport NameCallback from './name-callback';\nimport PasswordCallback from './password-callback';\nimport PollingWaitCallback from './polling-wait-callback';\nimport ReCaptchaCallback from './recaptcha-callback';\nimport TermsAndConditionsCallback from './terms-and-conditions-callback';\nimport TextOutputCallback from './text-output-callback';\nimport ValidatedCreatePasswordCallback from './validated-create-password-callback';\nimport ValidatedCreateUsernameCallback from './validated-create-username-callback';\n\ntype FRCallbackFactory = (callback: Callback) => FRCallback;\n\n/**\n * @hidden\n */\nfunction createCallback(callback: Callback): FRCallback {\n  switch (callback.type) {\n    case CallbackType.BooleanAttributeInputCallback:\n      return new AttributeInputCallback<boolean>(callback);\n    case CallbackType.ChoiceCallback:\n      return new ChoiceCallback(callback);\n    case CallbackType.ConfirmationCallback:\n      return new ConfirmationCallback(callback);\n    case CallbackType.DeviceProfileCallback:\n      return new DeviceProfileCallback(callback);\n    case CallbackType.HiddenValueCallback:\n      return new HiddenValueCallback(callback);\n    case CallbackType.KbaCreateCallback:\n      return new KbaCreateCallback(callback);\n    case CallbackType.MetadataCallback:\n      return new MetadataCallback(callback);\n    case CallbackType.NameCallback:\n      return new NameCallback(callback);\n    case CallbackType.PasswordCallback:\n      return new PasswordCallback(callback);\n    case CallbackType.PollingWaitCallback:\n      return new PollingWaitCallback(callback);\n    case CallbackType.ReCaptchaCallback:\n      return new ReCaptchaCallback(callback);\n    case CallbackType.StringAttributeInputCallback:\n      return new AttributeInputCallback<string>(callback);\n    case CallbackType.TermsAndConditionsCallback:\n      return new TermsAndConditionsCallback(callback);\n    case CallbackType.TextOutputCallback:\n      return new TextOutputCallback(callback);\n    case CallbackType.ValidatedCreatePasswordCallback:\n      return new ValidatedCreatePasswordCallback(callback);\n    case CallbackType.ValidatedCreateUsernameCallback:\n      return new ValidatedCreateUsernameCallback(callback);\n    default:\n      return new FRCallback(callback);\n  }\n}\n\nexport default createCallback;\nexport { FRCallbackFactory };\n","import {\n  browserProps,\n  configurableCategories,\n  delay,\n  devicePlatforms,\n  displayProps,\n  fontNames,\n  hardwareProps,\n  platformProps,\n} from './defaults';\nimport {\n  BaseProfileConfig,\n  Category,\n  CollectParameters,\n  DeviceProfileData,\n  Geolocation,\n  ProfileConfigOptions,\n} from './interfaces';\nimport Collector from './collector';\n\n/**\n * @class FRDevice - Collects user device metadata\n *\n * Example:\n *\n * ```js\n * // Instantiate new device object (w/optional config, if needed)\n * const device = new forgerock.FRDevice(\n *   // optional configuration\n * );\n * // override any instance methods, if needed\n * // e.g.: device.getDisplayMeta = () => {};\n *\n * // Call getProfile with required argument obj of boolean properties\n * // of location and metadata\n * const profile = await device.getProfile({\n *   location: isLocationRequired,\n *   metadata: isMetadataRequired,\n * });\n * ```\n */\nclass FRDevice extends Collector {\n  config: BaseProfileConfig = {\n    fontNames,\n    devicePlatforms,\n    displayProps,\n    browserProps,\n    hardwareProps,\n    platformProps,\n  };\n\n  constructor(config?: ProfileConfigOptions) {\n    super();\n    if (config) {\n      Object.keys(config).forEach((key: string) => {\n        if (!configurableCategories.includes(key)) {\n          throw new Error('Device profile configuration category does not exist.');\n        }\n        this.config[key as Category] = config[key as Category];\n      });\n    }\n  }\n\n  getBrowserMeta(): { [key: string]: string } {\n    if (!navigator) {\n      console.warn('Cannot collect browser metadata. navigator is not defined.');\n      return {};\n    }\n    return this.reduceToObject(this.config.browserProps, navigator);\n  }\n\n  getBrowserPluginsNames(): string {\n    if (!(navigator && navigator.plugins)) {\n      console.warn('Cannot collect browser plugin information. navigator.plugins is not defined.');\n      return '';\n    }\n    return this.reduceToString(Object.keys(navigator.plugins), navigator.plugins);\n  }\n\n  getDeviceName(): string {\n    if (!navigator) {\n      console.warn('Cannot collect device name. navigator is not defined.');\n      return '';\n    }\n    const userAgent = navigator.userAgent;\n    const platform = navigator.platform;\n\n    switch (true) {\n      case this.config.devicePlatforms.mac.includes(platform):\n        return 'Mac (Browser)';\n      case this.config.devicePlatforms.ios.includes(platform):\n        return `${platform} (Browser)`;\n      case this.config.devicePlatforms.windows.includes(platform):\n        return 'Windows (Browser)';\n      case /Android/.test(platform) || /Android/.test(userAgent):\n        return 'Android (Browser)';\n      case /CrOS/.test(userAgent) || /Chromebook/.test(userAgent):\n        return 'Chrome OS (Browser)';\n      case /Linux/.test(platform):\n        return 'Linux (Browser)';\n      default:\n        return `${platform || 'Unknown'} (Browser)`;\n    }\n  }\n\n  getDisplayMeta(): { [key: string]: string | number | null } {\n    if (!screen) {\n      console.warn('Cannot collect screen information. screen is not defined.');\n    }\n    return this.reduceToObject(this.config.displayProps, screen);\n  }\n\n  getHardwareMeta(): { [key: string]: string } {\n    if (!navigator) {\n      console.warn('Cannot collect OS metadata. Navigator is not defined.');\n      return {};\n    }\n    return this.reduceToObject(this.config.hardwareProps, navigator);\n  }\n\n  getIdentifier(): string {\n    if (!(window.crypto && window.crypto.getRandomValues)) {\n      console.warn('Cannot generate profile ID. Crypto and/or getRandomValues is not supported.');\n      return '';\n    }\n    if (!localStorage) {\n      console.warn('Cannot store profile ID. localStorage is not supported.');\n      return '';\n    }\n    let id = localStorage.getItem('profile-id');\n    if (!id) {\n      // generate ID, 3 sections of random numbers: \"714524572-2799534390-3707617532\"\n      id = window.crypto.getRandomValues(new Uint32Array(3)).join('-');\n      localStorage.setItem('profile-id', id);\n    }\n    return id;\n  }\n\n  getInstalledFonts(): string {\n    const canvas = document.createElement('canvas');\n    if (!canvas) {\n      console.warn('Cannot collect font data. Browser does not support canvas element');\n      return '';\n    }\n    const context = canvas.getContext && canvas.getContext('2d');\n\n    if (!context) {\n      console.warn('Cannot collect font data. Browser does not support 2d canvas context');\n      return '';\n    }\n    const text = 'abcdefghi0123456789';\n    context.font = '72px Comic Sans';\n    const baseWidth = context.measureText(text).width;\n\n    const installedFonts = this.config.fontNames.reduce((prev, curr) => {\n      context.font = `72px ${curr}, Comic Sans`;\n      const newWidth = context.measureText(text).width;\n\n      if (newWidth !== baseWidth) {\n        prev = `${prev}${curr};`;\n      }\n      return prev;\n    }, '');\n\n    return installedFonts;\n  }\n\n  async getLocationCoordinates(): Promise<Geolocation | {}> {\n    if (!(navigator && navigator.geolocation)) {\n      console.warn('Cannot collect geolocation information. navigator.geolocation is not defined.');\n      return Promise.resolve({});\n    }\n    return new Promise(async (resolve) => {\n      navigator.geolocation.getCurrentPosition(\n        (position) =>\n          resolve({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          }),\n        (error) => {\n          console.warn(\n            'Cannot collect geolocation information. ' + error.code + ': ' + error.message,\n          );\n          resolve({});\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: delay,\n          maximumAge: 0,\n        },\n      );\n    });\n  }\n\n  getOSMeta(): { [key: string]: string } {\n    if (!navigator) {\n      console.warn('Cannot collect OS metadata. navigator is not defined.');\n      return {};\n    }\n    return this.reduceToObject(this.config.platformProps, navigator);\n  }\n\n  async getProfile({ location, metadata }: CollectParameters): Promise<DeviceProfileData> {\n    const profile: DeviceProfileData = {\n      identifier: this.getIdentifier(),\n    };\n\n    if (metadata) {\n      profile.metadata = {\n        hardware: {\n          ...this.getHardwareMeta(),\n          display: this.getDisplayMeta(),\n        },\n        browser: {\n          ...this.getBrowserMeta(),\n          plugins: this.getBrowserPluginsNames(),\n        },\n        platform: {\n          ...this.getOSMeta(),\n          deviceName: this.getDeviceName(),\n          fonts: this.getInstalledFonts(),\n          timezone: this.getTimezoneOffset(),\n        },\n      };\n    }\n    if (location) {\n      profile.location = await this.getLocationCoordinates();\n    }\n    return profile;\n  }\n\n  getTimezoneOffset(): number | null {\n    try {\n      return new Date().getTimezoneOffset();\n    } catch (err) {\n      console.warn('Cannot collect timezone information. getTimezoneOffset is not defined.');\n      return null;\n    }\n  }\n}\n\nexport default FRDevice;\n","const browserProps = [\n  'userAgent',\n  'appName',\n  'appCodeName',\n  'appVersion',\n  'appMinorVersion',\n  'buildID',\n  'product',\n  'productSub',\n  'vendor',\n  'vendorSub',\n  'browserLanguage',\n];\nconst configurableCategories = [\n  'fontNames',\n  'displayProps',\n  'browserProps',\n  'hardwareProps',\n  'platformProps',\n];\nconst delay = 30 * 1000;\nconst devicePlatforms = {\n  mac: ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],\n  windows: ['Win32', 'Win64', 'Windows', 'WinCE'],\n  ios: ['iPhone', 'iPad', 'iPod'],\n};\nconst displayProps = ['width', 'height', 'pixelDepth', 'orientation.angle'];\nconst fontNames = [\n  'cursive',\n  'monospace',\n  'serif',\n  'sans-serif',\n  'fantasy',\n  'Arial',\n  'Arial Black',\n  'Arial Narrow',\n  'Arial Rounded MT Bold',\n  'Bookman Old Style',\n  'Bradley Hand ITC',\n  'Century',\n  'Century Gothic',\n  'Comic Sans MS',\n  'Courier',\n  'Courier New',\n  'Georgia',\n  'Gentium',\n  'Impact',\n  'King',\n  'Lucida Console',\n  'Lalit',\n  'Modena',\n  'Monotype Corsiva',\n  'Papyrus',\n  'Tahoma',\n  'TeX',\n  'Times',\n  'Times New Roman',\n  'Trebuchet MS',\n  'Verdana',\n  'Verona',\n];\nconst hardwareProps = [\n  'cpuClass',\n  'deviceMemory',\n  'hardwareConcurrency',\n  'maxTouchPoints',\n  'oscpu',\n];\nconst platformProps = ['language', 'platform', 'userLanguage', 'systemLanguage'];\n\nexport {\n  browserProps,\n  configurableCategories,\n  delay,\n  devicePlatforms,\n  displayProps,\n  fontNames,\n  hardwareProps,\n  platformProps,\n};\n","import { StringDict } from '../shared/interfaces';\n\n/**\n * @class Collector - base class for FRDevice\n * Generic collector functions for collecting a device profile attributes\n */\nclass Collector {\n  /**\n   * @method reduceToObject - goes one to two levels into source to collect attribute\n   * @param props - array of strings; can use dot notation for two level lookup\n   * @param src - source of attributes to check\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reduceToObject(props: string[], src: StringDict<any>): StringDict<string> {\n    return props.reduce((prev, curr) => {\n      if (curr.includes('.')) {\n        const propArr = curr.split('.');\n        const prop1 = propArr[0];\n        const prop2 = propArr[1];\n        const prop = src[prop1] && src[prop1][prop2];\n        prev[prop2] = prop != undefined ? prop : '';\n      } else {\n        prev[curr] = src[curr] != undefined ? src[curr] : null;\n      }\n      return prev;\n    }, {} as StringDict<string>);\n  }\n\n  /**\n   * @method reduceToString - goes one level into source to collect attribute\n   * @param props - array of strings\n   * @param src - source of attributes to check\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reduceToString(props: string[], src: any): string {\n    return props.reduce((prev, curr) => {\n      prev = `${prev}${src[curr].filename};`;\n      return prev;\n    }, '');\n  }\n}\n\nexport default Collector;\n","import { ConfigOptions } from '../config';\nimport FRStep, { FRStepHandler } from '../fr-auth/fr-step';\nimport FRUI from '../fr-ui';\nimport OAuth2Client from '../oauth2-client';\nimport TokenManager from '../token-manager';\nimport UserManager from '../user-manager';\n\n/**\n * High-level API for logging a user in/out and getting profile information.\n */\nabstract class FRUser {\n  /**\n   * Logs the user in with the specified step handler, acquires OAuth tokens, and retrieves\n   * user profile.  **Currently not implemented.**\n   *\n   * @typeparam T The type of user object expected\n   * @param handler The function to invoke when handling authentication steps\n   * @param options Configuration overrides\n   */\n  public static async login<T>(\n    handler: FRStepHandler,\n    options?: ConfigOptions,\n  ): Promise<FRStep | T> {\n    console.info(handler, options); // Avoid lint errors\n    throw new Error('FRUser.login() not implemented');\n  }\n\n  /**\n   * Logs the user in with the specified UI, acquires OAuth tokens, and retrieves user profile.\n   *\n   * @typeparam T The type of user object expected\n   * @param ui The UI instance to use to acquire a session\n   * @param options Configuration overrides\n   */\n  public static async loginWithUI<T>(ui: FRUI, options?: ConfigOptions): Promise<T> {\n    try {\n      await ui.getSession(options);\n      await TokenManager.getTokens({ forceRenew: true });\n      const currentUser = await UserManager.getCurrentUser();\n      return currentUser as T;\n    } catch (error) {\n      throw new Error('Login failed');\n    }\n  }\n\n  /**\n   * Ends the user's session and revokes OAuth tokens.\n   *\n   * @param options Configuration overrides\n   */\n  public static async logout(options?: ConfigOptions): Promise<void> {\n    try {\n      // TODO: Determine if we're using logout() or endSession(). logout() removes\n      //       the cookie, but fails with CORS issues currently.\n      // await SessionManager.logout();\n      await OAuth2Client.endSession(options);\n      await OAuth2Client.revokeToken(options);\n      await TokenManager.deleteTokens();\n    } catch (error) {\n      throw new Error('Logout failed');\n    }\n  }\n}\n\nexport default FRUser;\n","import { Tokens } from '../shared/interfaces';\nimport { DB_NAME, TOKEN_KEY } from './constants';\nimport { TokenDbEvent } from './interfaces';\n\n/**\n * Provides wrapper for tokens with IndexedDB.\n */\nabstract class IndexedDBWrapper {\n  /**\n   * Retrieve tokens.\n   */\n  public static async get(clientId: string): Promise<Tokens> {\n    return new Promise((resolve, reject) => {\n      const onError = (): void => reject();\n\n      const openReq = window.indexedDB.open(DB_NAME);\n\n      openReq.onsuccess = (): void => {\n        if (!openReq.result.objectStoreNames.contains(clientId)) {\n          openReq.result.close();\n          return resolve(undefined);\n        }\n\n        const getReq = openReq.result\n          .transaction(clientId, 'readonly')\n          .objectStore(clientId)\n          .get(TOKEN_KEY);\n\n        getReq.onsuccess = (event: TokenDbEvent): void => {\n          if (!event || !event.target) {\n            throw new Error('Missing storage event target');\n          }\n          openReq.result.close();\n          resolve(event.target.result);\n        };\n\n        getReq.onerror = onError;\n      };\n\n      openReq.onupgradeneeded = (): void => {\n        openReq.result.close();\n        resolve(undefined);\n      };\n\n      openReq.onerror = onError;\n    });\n  }\n\n  /**\n   * Saves tokens.\n   */\n  public static async set(clientId: string, tokens: Tokens): Promise<void> {\n    return new Promise((resolve, reject) => {\n      let openReq = window.indexedDB.open(DB_NAME);\n\n      const onSetSuccess = (): void => {\n        openReq.result.close();\n        resolve();\n      };\n\n      const onError = (): void => reject();\n\n      const onUpgradeNeeded = (): void => {\n        openReq.result.createObjectStore(clientId);\n      };\n\n      const onOpenSuccess = (): void => {\n        if (!openReq.result.objectStoreNames.contains(clientId)) {\n          const version = openReq.result.version + 1;\n          openReq.result.close();\n\n          openReq = window.indexedDB.open(DB_NAME, version);\n          openReq.onupgradeneeded = onUpgradeNeeded;\n          openReq.onsuccess = onOpenSuccess;\n          openReq.onerror = onError;\n          return;\n        }\n\n        const txnReq = openReq.result.transaction(clientId, 'readwrite');\n        txnReq.onerror = onError;\n        const objectStore = txnReq.objectStore(clientId);\n        const putReq = objectStore.put(tokens, TOKEN_KEY);\n        putReq.onsuccess = onSetSuccess;\n        putReq.onerror = onError;\n      };\n\n      openReq.onupgradeneeded = onUpgradeNeeded;\n      openReq.onsuccess = onOpenSuccess;\n      openReq.onerror = onError;\n    });\n  }\n\n  /**\n   * Removes stored tokens.\n   */\n  public static async remove(clientId: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const onError = (): void => reject();\n\n      const openReq = window.indexedDB.open(DB_NAME);\n\n      openReq.onsuccess = (): void => {\n        if (!openReq.result.objectStoreNames.contains(clientId)) {\n          return resolve();\n        }\n\n        const removeReq = openReq.result\n          .transaction(clientId, 'readwrite')\n          .objectStore(clientId)\n          .delete(TOKEN_KEY);\n\n        removeReq.onsuccess = (): void => {\n          resolve();\n        };\n\n        removeReq.onerror = onError;\n      };\n\n      openReq.onerror = onError;\n    });\n  }\n}\n\nexport default IndexedDBWrapper;\n","import { Tokens } from '../shared/interfaces';\nimport { DB_NAME } from './constants';\n\n/**\n * Provides wrapper for tokens with localStorage.\n */\nabstract class LocalStorageWrapper {\n  /**\n   * Retrieve tokens.\n   */\n  public static async get(clientId: string): Promise<Tokens> {\n    const tokenString = localStorage.getItem(`${DB_NAME}-${clientId}`);\n\n    try {\n      return Promise.resolve(JSON.parse(tokenString || ''));\n    } catch (err) {\n      console.warn(\n        'Could not parse token from localStorage. This could be due to accessing a removed token',\n      );\n      // Original behavior had an untyped return of undefined for no token\n      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n      return undefined;\n    }\n  }\n\n  /**\n   * Saves tokens.\n   */\n  public static async set(clientId: string, tokens: Tokens): Promise<void> {\n    const tokenString = JSON.stringify(tokens);\n    localStorage.setItem(`${DB_NAME}-${clientId}`, tokenString);\n  }\n\n  /**\n   * Removes stored tokens.\n   */\n  public static async remove(clientId: string): Promise<void> {\n    localStorage.removeItem(`${DB_NAME}-${clientId}`);\n  }\n}\n\nexport default LocalStorageWrapper;\n","import { Tokens } from '../shared/interfaces';\nimport { DB_NAME } from './constants';\n\n/**\n * Provides wrapper for tokens with sessionStorage.\n */\nabstract class SessionStorageWrapper {\n  /**\n   * Retrieve tokens.\n   */\n  public static async get(clientId: string): Promise<Tokens> {\n    const tokenString = sessionStorage.getItem(`${DB_NAME}-${clientId}`);\n\n    try {\n      return Promise.resolve(JSON.parse(tokenString || ''));\n    } catch (err) {\n      console.warn(\n        'Could not parse token from sessionStorage. This could be due to accessing a removed token',\n      );\n      // Original behavior had an untyped return of undefined for no token\n      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n      return undefined;\n    }\n  }\n\n  /**\n   * Saves tokens.\n   */\n  public static async set(clientId: string, tokens: Tokens): Promise<void> {\n    const tokenString = JSON.stringify(tokens);\n    sessionStorage.setItem(`${DB_NAME}-${clientId}`, tokenString);\n  }\n\n  /**\n   * Removes stored tokens.\n   */\n  public static async remove(clientId: string): Promise<void> {\n    sessionStorage.removeItem(`${DB_NAME}-${clientId}`);\n  }\n}\n\nexport default SessionStorageWrapper;\n","/**\n * Specifies the type of OAuth flow to invoke.\n */\nenum ResponseType {\n  Code = 'code',\n  Token = 'token',\n}\n\nexport { ResponseType };\n","import { CallbackType } from '../auth/enums';\nimport HiddenValueCallback from '../fr-auth/callbacks/hidden-value-callback';\nimport MetadataCallback from '../fr-auth/callbacks/metadata-callback';\nimport FRStep from '../fr-auth/fr-step';\nimport { WebAuthnOutcome, WebAuthnStepType } from './enums';\nimport {\n  getClientDataJson,\n  parseCredentials,\n  parsePubKeyArray,\n  parseRelyingPartyId,\n} from './helpers';\nimport {\n  RelyingParty,\n  WebAuthnAuthenticationMetadata,\n  WebAuthnCallbacks,\n  WebAuthnRegistrationMetadata,\n  WebAuthnTextOutputRegistration,\n} from './interfaces';\nimport TextOutputCallback from '../fr-auth/callbacks/text-output-callback';\nimport { parseWebAuthnAuthenticateText, parseWebAuthnRegisterText } from './script-parser';\n\n// JSON-based WebAuthn\ntype WebAuthnMetadata = WebAuthnAuthenticationMetadata | WebAuthnRegistrationMetadata;\n// Script-based WebAuthn\ntype WebAuthnTextOutput = WebAuthnTextOutputRegistration;\n/**\n * Utility for integrating a web browser's WebAuthn API.\n *\n * Example:\n *\n * ```js\n * // Determine if a step is a WebAuthn step\n * const stepType = FRWebAuthn.getWebAuthnStepType(step);\n * if (stepType === WebAuthnStepType.Registration) {\n *   // Register a new device\n *   await FRWebAuthn.register(step);\n * } else if (stepType === WebAuthnStepType.Authentication) {\n *   // Authenticate with a registered device\n *   await FRWebAuthn.authenticate(step);\n * }\n */\nabstract class FRWebAuthn {\n  /**\n   * Determines if the given step is a WebAuthn step.\n   *\n   * @param step The step to evaluate\n   * @return A WebAuthnStepType value\n   */\n  public static getWebAuthnStepType(step: FRStep): WebAuthnStepType {\n    const outcomeCallback = this.getOutcomeCallback(step);\n    const metadataCallback = this.getMetadataCallback(step);\n    const textOutputCallback = this.getTextOutputCallback(step);\n\n    if (outcomeCallback && metadataCallback) {\n      const metadata = metadataCallback.getOutputValue('data') as WebAuthnAuthenticationMetadata;\n      if (metadata.allowCredentials) {\n        return WebAuthnStepType.Authentication;\n      }\n\n      return WebAuthnStepType.Registration;\n    } else if (outcomeCallback && textOutputCallback) {\n      const message = textOutputCallback.getMessage();\n      if (message.includes('allowCredentials')) {\n        return WebAuthnStepType.Authentication;\n      }\n\n      return WebAuthnStepType.Registration;\n    } else {\n      return WebAuthnStepType.None;\n    }\n  }\n\n  /**\n   * Populates the step with the necessary authentication outcome.\n   *\n   * @param step The step that contains WebAuthn authentication data\n   * @return The populated step\n   */\n  public static async authenticate(step: FRStep): Promise<FRStep> {\n    const { hiddenCallback, metadataCallback, textOutputCallback } = this.getCallbacks(step);\n    if (hiddenCallback && (metadataCallback || textOutputCallback)) {\n      let outcome: string;\n\n      try {\n        let publicKey: PublicKeyCredentialRequestOptions;\n        if (metadataCallback) {\n          const meta = metadataCallback.getOutputValue('data') as WebAuthnAuthenticationMetadata;\n          publicKey = this.createAuthenticationPublicKey(meta);\n        } else if (textOutputCallback) {\n          publicKey = parseWebAuthnAuthenticateText(textOutputCallback.getMessage());\n        }\n        // TypeScript doesn't like `publicKey` being assigned in conditionals above\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        const credential = await this.getAuthenticationCredential(publicKey);\n        outcome = this.getAuthenticationOutcome(credential);\n      } catch (error) {\n        outcome = this.getErrorOutcome(error);\n      }\n\n      hiddenCallback.setInputValue(outcome);\n      return step;\n    } else {\n      throw new Error('Invalid webauthn payload');\n    }\n  }\n\n  /**\n   * Populates the step with the necessary registration outcome.\n   *\n   * @param step The step that contains WebAuthn registration data\n   * @return The populated step\n   */\n  public static async register(step: FRStep): Promise<FRStep> {\n    const { hiddenCallback, metadataCallback, textOutputCallback } = this.getCallbacks(step);\n    if (hiddenCallback && (metadataCallback || textOutputCallback)) {\n      let outcome: string;\n\n      try {\n        let publicKey: PublicKeyCredentialRequestOptions;\n        if (metadataCallback) {\n          const meta = metadataCallback.getOutputValue('data') as WebAuthnRegistrationMetadata;\n          publicKey = this.createRegistrationPublicKey(meta);\n        } else if (textOutputCallback) {\n          publicKey = parseWebAuthnRegisterText(textOutputCallback.getMessage());\n        }\n        // TypeScript doesn't like `publicKey` being assigned in conditionals above\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        const credential = await this.getRegistrationCredential(publicKey);\n        outcome = this.getRegistrationOutcome(credential);\n      } catch (error) {\n        outcome = this.getErrorOutcome(error);\n      }\n\n      hiddenCallback.setInputValue(outcome);\n      return step;\n    } else {\n      throw new Error('Invalid webauthn payload');\n    }\n  }\n\n  /**\n   * Returns an object containing the two WebAuthn callbacks.\n   *\n   * @param step The step that contains WebAuthn callbacks\n   * @return The WebAuthn callbacks\n   */\n  public static getCallbacks(step: FRStep): WebAuthnCallbacks {\n    const hiddenCallback = this.getOutcomeCallback(step);\n    const metadataCallback = this.getMetadataCallback(step);\n    const textOutputCallback = this.getTextOutputCallback(step);\n\n    const returnObj: WebAuthnCallbacks = {\n      hiddenCallback,\n    };\n    if (metadataCallback) {\n      returnObj.metadataCallback = metadataCallback;\n    } else if (textOutputCallback) {\n      returnObj.textOutputCallback = textOutputCallback;\n    }\n    return returnObj;\n  }\n\n  /**\n   * Returns the WebAuthn metadata callback containing data to pass to the browser\n   * Web Authentication API.\n   *\n   * @param step The step that contains WebAuthn callbacks\n   * @return The metadata callback\n   */\n  public static getMetadataCallback(step: FRStep): MetadataCallback | undefined {\n    return step.getCallbacksOfType<MetadataCallback>(CallbackType.MetadataCallback).find((x) => {\n      const cb = x.getOutputByName<WebAuthnMetadata | undefined>('data', undefined);\n      return cb && cb.hasOwnProperty('relyingPartyId');\n    });\n  }\n\n  /**\n   * Returns the WebAuthn hidden value callback where the outcome should be populated.\n   *\n   * @param step The step that contains WebAuthn callbacks\n   * @return The hidden value callback\n   */\n  public static getOutcomeCallback(step: FRStep): HiddenValueCallback | undefined {\n    return step\n      .getCallbacksOfType<HiddenValueCallback>(CallbackType.HiddenValueCallback)\n      .find((x) => x.getOutputByName<string>('id', '') === 'webAuthnOutcome');\n  }\n\n  /**\n   * Returns the WebAuthn metadata callback containing data to pass to the browser\n   * Web Authentication API.\n   *\n   * @param step The step that contains WebAuthn callbacks\n   * @return The metadata callback\n   */\n  public static getTextOutputCallback(step: FRStep): TextOutputCallback | undefined {\n    return step\n      .getCallbacksOfType<TextOutputCallback>(CallbackType.TextOutputCallback)\n      .find((x) => {\n        const cb = x.getOutputByName<WebAuthnTextOutput | undefined>('message', undefined);\n        return cb && cb.includes('webAuthnOutcome');\n      });\n  }\n\n  /**\n   * Retrieves the credential from the browser Web Authentication API.\n   *\n   * @param options The public key options associated with the request\n   * @return The credential\n   */\n  public static async getAuthenticationCredential(\n    options: PublicKeyCredentialRequestOptions,\n  ): Promise<PublicKeyCredential | null> {\n    const credential = await navigator.credentials.get({ publicKey: options });\n    return credential as PublicKeyCredential;\n  }\n\n  /**\n   * Converts an authentication credential into the outcome expected by OpenAM.\n   *\n   * @param credential The credential to convert\n   * @return The outcome string\n   */\n  public static getAuthenticationOutcome(credential: PublicKeyCredential | null): string {\n    if (!window.PublicKeyCredential) {\n      return WebAuthnOutcome.Unsupported;\n    }\n\n    try {\n      if (credential === null) {\n        throw new Error('No credential provided');\n      }\n\n      const clientDataJSON = getClientDataJson(credential);\n      const assertionResponse = credential.response as AuthenticatorAssertionResponse;\n      const authenticatorData = new Int8Array(assertionResponse.authenticatorData).toString();\n      const signature = new Int8Array(assertionResponse.signature).toString();\n\n      return `${clientDataJSON}::${authenticatorData}::${signature}::${credential.id}`;\n    } catch (error) {\n      return this.getErrorOutcome(error);\n    }\n  }\n\n  /**\n   * Retrieves the credential from the browser Web Authentication API.\n   *\n   * @param options The public key options associated with the request\n   * @return The credential\n   */\n  public static async getRegistrationCredential(\n    options: PublicKeyCredentialCreationOptions,\n  ): Promise<PublicKeyCredential | null> {\n    let credential;\n    try {\n      credential = await navigator.credentials.create({ publicKey: options });\n    } catch (error) {\n      throw new Error(error.message);\n    }\n    return credential as PublicKeyCredential;\n  }\n\n  /**\n   * Converts a registration credential into the outcome expected by OpenAM.\n   *\n   * @param credential The credential to convert\n   * @return The outcome string\n   */\n  public static getRegistrationOutcome(credential: PublicKeyCredential | null): string {\n    if (!window.PublicKeyCredential) {\n      return WebAuthnOutcome.Unsupported;\n    }\n\n    try {\n      if (credential === null) {\n        throw new Error('No credential provided');\n      }\n\n      const clientDataJSON = getClientDataJson(credential);\n      const attestationResponse = credential.response as AuthenticatorAttestationResponse;\n      const attestationObject = new Int8Array(attestationResponse.attestationObject).toString();\n      return `${clientDataJSON}::${attestationObject}::${credential.id}`;\n    } catch (error) {\n      return this.getErrorOutcome(error);\n    }\n  }\n\n  /**\n   * Converts authentication tree metadata into options required by the browser\n   * Web Authentication API.\n   *\n   * @param metadata The metadata provided in the authentication tree MetadataCallback\n   * @return The Web Authentication API request options\n   */\n  public static createAuthenticationPublicKey(\n    metadata: WebAuthnAuthenticationMetadata,\n  ): PublicKeyCredentialRequestOptions {\n    const { allowCredentials, challenge, relyingPartyId, timeout } = metadata;\n    const rpId = parseRelyingPartyId(relyingPartyId);\n\n    return {\n      allowCredentials: parseCredentials(allowCredentials),\n      challenge: Uint8Array.from(atob(challenge), (c) => c.charCodeAt(0)).buffer,\n      timeout,\n      ...(rpId && { rpId }),\n    };\n  }\n\n  /**\n   * Converts authentication tree metadata into options required by the browser\n   * Web Authentication API.\n   *\n   * @param metadata The metadata provided in the authentication tree MetadataCallback\n   * @return The Web Authentication API request options\n   */\n  public static createRegistrationPublicKey(\n    metadata: WebAuthnRegistrationMetadata,\n  ): PublicKeyCredentialCreationOptions {\n    const { pubKeyCredParams: pubKeyCredParamsString } = metadata;\n    const pubKeyCredParams = parsePubKeyArray(pubKeyCredParamsString);\n    if (!pubKeyCredParams) {\n      throw new Error('Missing pubKeyCredParams');\n    }\n\n    const {\n      attestationPreference,\n      authenticatorSelection,\n      challenge,\n      relyingPartyId,\n      relyingPartyName,\n      timeout,\n      userId,\n      userName,\n    } = metadata;\n    const rpId = parseRelyingPartyId(relyingPartyId);\n    const rp: RelyingParty = {\n      name: relyingPartyName,\n      ...(rpId && { id: rpId }),\n    };\n\n    return {\n      attestation: attestationPreference,\n      authenticatorSelection: JSON.parse(authenticatorSelection),\n      challenge: Uint8Array.from(atob(challenge), (c) => c.charCodeAt(0)).buffer,\n      pubKeyCredParams,\n      rp,\n      timeout,\n      user: {\n        displayName: userName,\n        id: Int8Array.from(userId.split('').map((c: string) => c.charCodeAt(0))),\n        name: userName,\n      },\n    };\n  }\n\n  private static getErrorOutcome(error: Error): string {\n    const name = error.name ? `${error.name}:` : '';\n    return `${WebAuthnOutcome.Error}::${name}${error.message}`;\n  }\n}\n\nexport default FRWebAuthn;\nexport {\n  RelyingParty,\n  WebAuthnAuthenticationMetadata,\n  WebAuthnCallbacks,\n  WebAuthnOutcome,\n  WebAuthnRegistrationMetadata,\n  WebAuthnStepType,\n};\n","enum WebAuthnOutcome {\n  Error = 'ERROR',\n  Unsupported = 'unsupported',\n}\n\nenum WebAuthnStepType {\n  None = 0,\n  Authentication = 1,\n  Registration = 2,\n}\n\nexport { WebAuthnOutcome, WebAuthnStepType };\n","import { ensureArray, getIndexOne, parsePubKeyArray } from './helpers';\nimport { AttestationType, UserVerificationType } from './interfaces';\n\nfunction parseWebAuthnRegisterText(text: string): PublicKeyCredentialCreationOptions {\n  const txtEncoder = new TextEncoder();\n\n  // e.g. `attestation: \"none\"`\n  const attestation = getIndexOne(text.match(/attestation:\\s{0,}\"(\\w+)\"/)) as AttestationType;\n  // e.g. `timeout: 60000`\n  const timeout = Number(getIndexOne(text.match(/timeout:\\s{0,}(\\d+)/)));\n  // e.g. `\"userVerification\":\"preferred\"`\n  const userVerification = getIndexOne(\n    text.match(/\"userVerification\":\\s{0,}\"(\\w+)\"/),\n  ) as UserVerificationType;\n\n  // e.g. `rp: {\\n id: \\\"https://user.example.com:3002\\\",\\n name: \\\"ForgeRock\\\"\\n }`\n  const rp = getIndexOne(text.match(/rp:\\s{0,}{([^}]+)}/)).trim();\n  // e.g. `id: \\\"https://user.example.com:3002\\\"\n  const rpId = getIndexOne(rp.match(/id:\\s{0,}\"([^\"]*)\"/));\n  // e.g. `name: \\\"ForgeRock\\\"`\n  const rpName = getIndexOne(rp.match(/name:\\s{0,}\"([^\"]*)\"/));\n\n  // e.g. `user: {\\n id: Uint8Array.from(\\\"NTdhN...RiNjI5\\\",\n  // function (c) { return c.charCodeAt(0) }),\\n\n  // name: \\\"57a5b4e4-...-a4f2e5d4b629\\\",\\n\n  // displayName: \\\"57a5b4e4-...-a4f2e5d4b629\\\"\\n }`\n  const user = getIndexOne(text.match(/user:\\s{0,}{([^]{0,})},/)).trim();\n  // e.g `id: Uint8Array.from(\\\"NTdhN...RiNjI5\\\",`\n  const userId = getIndexOne(user.match(/id:\\s{0,}Uint8Array.from\\(\"([^\"]+)\"/));\n  // e.g. `name: \\\"57a5b4e4-...-a4f2e5d4b629\\\",`\n  const userName = getIndexOne(user.match(/name:\\s{0,}\"([\\d\\w._-]+)\"/));\n  // e.g. `displayName: \\\"57a5b4e4-...-a4f2e5d4b629\\\"`\n  const userDisplayName = getIndexOne(user.match(/displayName:\\s{0,}\"([\\d\\w._-]+)\"/));\n\n  // e.g. `pubKeyCredParams: [\n  // { \\\"type\\\": \\\"public-key\\\", \\\"alg\\\": -257 }, { \\\"type\\\": \\\"public-key\\\", \\\"alg\\\": -7 }\n  // ]`\n  const pubKeyCredParamsString = getIndexOne(\n    text.match(/pubKeyCredParams:\\s{0,}\\[([^]+) ]/),\n  ).trim();\n  // e.g. `{ \\\"type\\\": \\\"public-key\\\", \\\"alg\\\": -257 }, { \\\"type\\\": \\\"public-key\\\", \\\"alg\\\": -7 }`\n  const pubKeyCredParams = parsePubKeyArray(pubKeyCredParamsString);\n  if (!pubKeyCredParams) {\n    throw new Error('Missing pubKeyCredParams');\n  }\n\n  // e.g. `challenge: new Int8Array([87, -95, 18, ... -3,  49, 12, 81]).buffer,`\n  const challengeArr: string[] = ensureArray(\n    text.match(/challenge:\\s{0,}new\\s{0,}(Uint|Int)8Array\\(([^\\)]+)/),\n  );\n  // e.g. `[87, -95, 18, ... -3,  49, 12, 81]`\n  const challengeJSON = JSON.parse(challengeArr[2]);\n  // e.g. [87, -95, 18, ... -3,  49, 12, 81]\n  const challenge = new Int8Array(challengeJSON).buffer;\n\n  return {\n    attestation,\n    authenticatorSelection: {\n      userVerification,\n    },\n    challenge,\n    excludeCredentials: [],\n    pubKeyCredParams,\n    rp: {\n      id: rpId,\n      name: rpName,\n    },\n    timeout,\n    user: {\n      displayName: userDisplayName,\n      id: txtEncoder.encode(userId),\n      name: userName,\n    },\n  };\n}\n\nfunction parseWebAuthnAuthenticateText(text: string): PublicKeyCredentialRequestOptions {\n  // e.g. `allowCredentials: [\n  // { \\\"type\\\": \\\"public-key\\\",\n  // \\\"id\\\": new Int8Array([-107, 93, 68, -67, ... -19, 7, 4]).buffer }\n  // ]`\n  const allowCredentialsText = getIndexOne(\n    text.match(/allowCredentials:\\s{0,}\\[([^]+)\\s{0,}]/),\n  ).trim();\n  // Splitting objects in array in case the user has multiple keys\n  const allowCredentialArr = allowCredentialsText.split('},') || [allowCredentialsText];\n  // Iterating over array of substrings\n  const allowCredentials = allowCredentialArr.map((str) => {\n    // e.g. `{ \\\"type\\\": \\\"public-key\\\",\n    const type = getIndexOne(str.match(/\"type\":\\s{0,}\"([\\w-]+)\"/)) as 'public-key';\n    // e.g. \\\"id\\\": new Int8Array([-107, 93, 68, -67, ... -19, 7, 4]).buffer\n    const idArr = ensureArray(text.match(/\"id\":\\s{0,}new\\s{0,}(Uint|Int)8Array\\(([^\\)]+)/));\n    // e.g. `[-107, 93, 68, -67, ... -19, 7, 4]`\n    const idJSON = JSON.parse(idArr[2]);\n    // e.g. [-107, 93, 68, -67, ... -19, 7, 4]\n    const id = new Int8Array(idJSON).buffer;\n\n    return {\n      type,\n      id,\n    };\n  });\n\n  // e.g. `timeout: 60000`\n  const timeout = Number(getIndexOne(text.match(/timeout:\\s{0,}(\\d+)/)));\n\n  // e.g. `challenge: new Int8Array([87, -95, 18, ... -3,  49, 12, 81]).buffer,`\n  const challengeArr: string[] = ensureArray(\n    text.match(/challenge:\\s{0,}new\\s{0,}(Uint|Int)8Array\\(([^\\)]+)/),\n  );\n  // e.g. `[87, -95, 18, ... -3,  49, 12, 81]`\n  const challengeJSON = JSON.parse(challengeArr[2]);\n  // e.g. [87, -95, 18, ... -3,  49, 12, 81]\n  const challenge = new Int8Array(challengeJSON).buffer;\n  // e.g. `rpId: \"user.example.com\",`\n  const rpId = getIndexOne(text.match(/rpId:\\s{0,}\\[([^]+)\\s{0,}]/));\n\n  return {\n    allowCredentials,\n    challenge,\n    timeout,\n    ...(rpId && { id: rpId }),\n  };\n}\n\nexport { parseWebAuthnAuthenticateText, parseWebAuthnRegisterText };\n","import Config from '../config';\nimport { ActionTypes } from '../config/enums';\nimport Dispatcher from '../event';\nimport FRAuth from '../fr-auth';\nimport { StepType } from '../fr-auth/enums';\nimport FRStep from '../fr-auth/fr-step';\nimport {\n  HandleStep,\n  HttpClientRequestOptions,\n  RequiresNewTokenFn,\n  AuthorizationJSON,\n} from './interfaces';\nimport TokenManager from '../token-manager';\nimport TokenStorage from '../token-storage';\nimport { withTimeout } from '../util/timeout';\nimport {\n  addAuthzInfoToHeaders,\n  addAuthzInfoToURL,\n  buildAuthzOptions,\n  examineForIGAuthz,\n  examineForRESTAuthz,\n  hasAuthzAdvice,\n  isAuthzStep,\n  newTokenRequired,\n  normalizeIGJSON,\n  normalizeRESTJSON,\n} from './util';\nimport middlewareWrapper from '../util/middleware';\n\n/**\n * HTTP client that includes bearer token injection and refresh.\n * This module also supports authorization for policy protected endpoints.\n *\n * Example:\n *\n * ```js\n * return forgerock.HttpClient.request({\n *   url: `https://example.com/protected/resource`,\n *   init: {\n *     method: 'GET',\n *     credentials: 'include',\n *   },\n *   authorization: {\n *     handleStep: async (step) => {\n *       step.getCallbackOfType('PasswordCallback').setPassword(pw);\n *       return Promise.resolve(step);\n *     },\n *   },\n * });\n * ```\n */\nabstract class HttpClient extends Dispatcher {\n  /**\n   * Makes a request using the specified options.\n   *\n   * @param options The options to use when making the request\n   */\n  public static async request(options: HttpClientRequestOptions): Promise<Response> {\n    let res = await this._request(options, false);\n    let authorizationJSON: AuthorizationJSON | undefined;\n    let hasIG = false;\n\n    if (newTokenRequired(res, options.requiresNewToken)) {\n      res = await this._request(options, true);\n    }\n\n    if (options.authorization && options.authorization.handleStep) {\n      if (res.redirected && examineForIGAuthz(res)) {\n        hasIG = true;\n        authorizationJSON = normalizeIGJSON(res);\n      } else if (await examineForRESTAuthz(res)) {\n        authorizationJSON = await normalizeRESTJSON(res);\n      }\n\n      if (authorizationJSON && authorizationJSON.advices) {\n        const { realmPath, serverConfig } = Config.get(options.authorization.config);\n        const authzOptions = buildAuthzOptions(\n          authorizationJSON,\n          serverConfig.baseUrl,\n          options.timeout,\n          realmPath,\n          serverConfig.paths,\n        );\n\n        const url = new URL(authzOptions.url);\n        const type = url.searchParams.get('authIndexType') as string;\n        const tree = url.searchParams.get('authIndexValue') as string;\n        const { url: authUrl, init: authInit } = middlewareWrapper(\n          {\n            url: new URL(authzOptions.url),\n            init: authzOptions.init,\n          },\n          ActionTypes.StartAuthenticate,\n          { type, tree },\n        );\n        authzOptions.url = authUrl.toString();\n        authzOptions.init = authInit;\n        const initialStep = await this._request(authzOptions, false);\n\n        if (!(await isAuthzStep(initialStep))) {\n          throw new Error('Error: Initial response from auth server not a \"step\".');\n        }\n        if (!hasAuthzAdvice(authorizationJSON)) {\n          throw new Error(`Error: Transactional or Service Advice is empty.`);\n        }\n\n        try {\n          // Walk through auth tree\n          await this.stepIterator(initialStep, options.authorization.handleStep, type, tree);\n          // See if OAuth tokens are being used\n          let tokens;\n          try {\n            tokens = await TokenStorage.get();\n          } catch (err) {\n            // No OAuth Tokens\n          }\n          if (hasIG) {\n            // Update URL with IDs and tokens for IG\n            options.url = addAuthzInfoToURL(options.url, authorizationJSON.advices, tokens);\n          } else {\n            // Update headers with IDs and tokens for REST API\n            options.init.headers = addAuthzInfoToHeaders(\n              options.init,\n              authorizationJSON.advices,\n              tokens,\n            );\n          }\n          // Retry original resource request\n          res = await this._request(options, false);\n        } catch (err) {\n          throw new Error(err);\n        }\n      }\n    }\n\n    return res;\n  }\n\n  private static async setAuthHeaders(headers: Headers, forceRenew: boolean): Promise<Headers> {\n    let tokens;\n    try {\n      tokens = await TokenStorage.get();\n    } catch (err) {\n      // No OAuth Tokens\n    }\n\n    /**\n     * Condition to see if Auth is session based or OAuth token based\n     */\n    if (tokens && tokens.accessToken) {\n      // Access tokens are an OAuth artifact\n      tokens = await TokenManager.getTokens({ forceRenew });\n      headers.set('Authorization', `Bearer ${tokens.accessToken}`);\n    }\n    return headers;\n  }\n\n  private static async stepIterator(\n    res: Response,\n    handleStep: HandleStep,\n    type: string,\n    tree: string,\n  ): Promise<void> {\n    const jsonRes = await res.json();\n    const initialStep = new FRStep(jsonRes);\n\n    return new Promise(async (resolve, reject) => {\n      async function handleNext(step: FRStep): Promise<void> {\n        const input = await handleStep(step);\n        const output = await FRAuth.next(input, { type, tree });\n\n        if (output.type === StepType.LoginSuccess) {\n          resolve();\n        } else if (output.type === StepType.LoginFailure) {\n          reject('Authentication tree failure.');\n        } else {\n          handleNext(output);\n        }\n      }\n\n      handleNext(initialStep);\n    });\n  }\n\n  private static async _request(\n    options: HttpClientRequestOptions,\n    forceRenew: boolean,\n  ): Promise<Response> {\n    const { url, init, timeout } = options;\n    let headers = new Headers(init.headers || {});\n\n    if (!options.bypassAuthentication) {\n      headers = await this.setAuthHeaders(headers, forceRenew);\n    }\n    init.headers = headers;\n\n    let response;\n    try {\n      response = await withTimeout(fetch(url, init), timeout);\n    } catch (err) {\n      /**\n       * If the above fetch fails due to the following conditions:\n       *\n       * 1. Preflight\n       * 2. Authorization header\n       * 3. Redirection\n       *\n       * The request will need to be refetched as a \"simple request\".\n       * For more information, see:\n       * https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Preflighted_requests_and_redirects\n       */\n\n      response = await withTimeout(fetch(url, { method: 'GET' }), timeout);\n    }\n    return response as Response;\n  }\n}\n\nexport default HttpClient;\nexport { HttpClientRequestOptions, RequiresNewTokenFn };\n","/**\n * @module\n * @ignore\n * These are private utility functions for HttpClient\n */\nimport { CustomPathConfig } from '../config/interfaces';\nimport {\n  Advices,\n  HttpClientRequestOptions,\n  RequiresNewTokenFn,\n  AuthorizationJSON,\n} from './interfaces';\nimport { Tokens } from '../shared/interfaces';\nimport { getEndpointPath, resolve, stringify } from '../util/url';\n\nexport function addAuthzInfoToHeaders(\n  init: RequestInit,\n  advices: Advices,\n  tokens?: Tokens,\n): Headers {\n  const headers = new Headers(init.headers);\n\n  if (advices.AuthenticateToServiceConditionAdvice) {\n    headers.set('x-tree', advices.AuthenticateToServiceConditionAdvice[0]);\n  } else if (advices.TransactionConditionAdvice) {\n    headers.set('x-txid', advices.TransactionConditionAdvice[0]);\n  }\n\n  if (tokens && tokens.idToken) {\n    headers.set('x-idtoken', tokens.idToken);\n  }\n  return headers;\n}\n\nexport function addAuthzInfoToURL(url: string, advices: Advices, tokens?: Tokens): string {\n  const updatedURL = new URL(url);\n\n  // Only modify URL for Transactional Authorization\n  if (advices.TransactionConditionAdvice) {\n    const txId = advices.TransactionConditionAdvice[0];\n    // Add Txn ID to *original* request options as URL param\n    updatedURL.searchParams.append('_txid', txId);\n  }\n\n  // If tokens are used, send idToken (OIDC)\n  if (tokens && tokens.idToken) {\n    updatedURL.searchParams.append('_idtoken', tokens.idToken);\n  }\n\n  // FYI: in certain circumstances, the URL may be returned unchanged\n  return updatedURL.toString();\n}\n\nexport function buildAuthzOptions(\n  authzObj: AuthorizationJSON,\n  baseURL: string,\n  timeout: number,\n  realmPath?: string,\n  customPaths?: CustomPathConfig,\n): HttpClientRequestOptions {\n  const treeAuthAdvices = authzObj.advices && authzObj.advices.AuthenticateToServiceConditionAdvice;\n  const txnAuthAdvices = authzObj.advices && authzObj.advices.TransactionConditionAdvice;\n  let attributeValue = '';\n  let attributeName = '';\n\n  if (treeAuthAdvices) {\n    attributeValue = treeAuthAdvices.reduce((prev: string, curr: string) => {\n      const prevWithSpace = prev ? ` ${prev}` : prev;\n      prev = `${curr}${prevWithSpace}`;\n      return prev;\n    }, '');\n    attributeName = 'AuthenticateToServiceConditionAdvice';\n  } else if (txnAuthAdvices) {\n    attributeValue = txnAuthAdvices.reduce((prev: string, curr: string) => {\n      const prevWithSpace = prev ? ` ${prev}` : prev;\n      prev = `${curr}${prevWithSpace}`;\n      return prev;\n    }, '');\n    attributeName = 'TransactionConditionAdvice';\n  }\n\n  const openTags = `<Advices><AttributeValuePair>`;\n  const nameTag = `<Attribute name=\"${attributeName}\"/>`;\n  const valueTag = `<Value>${attributeValue}</Value>`;\n  const endTags = `</AttributeValuePair></Advices>`;\n  const fullXML = `${openTags}${nameTag}${valueTag}${endTags}`;\n\n  const path = getEndpointPath('authenticate', realmPath, customPaths);\n  const queryParams = {\n    authIndexType: 'composite_advice',\n    authIndexValue: fullXML,\n  };\n\n  const options = {\n    init: {\n      method: 'POST',\n      credentials: 'include' as 'include',\n      headers: {\n        'Accept-API-Version': 'resource=2.0, protocol=1.0',\n      },\n    },\n    timeout,\n    url: resolve(baseURL, `${path}?${stringify(queryParams)}`),\n  };\n  return options;\n}\n\nexport function examineForIGAuthz(res: Response): boolean {\n  const type = res.headers.get('Content-Type') || '';\n  return type.includes('html') && res.url.includes('composite_advice');\n}\n\nexport async function examineForRESTAuthz(res: Response): Promise<boolean> {\n  const clone = res.clone();\n  const json = await clone.json();\n  return !!json.advices;\n}\n\nfunction getXMLValueFromURL(urlString: string): string {\n  const url = new URL(urlString);\n  const value = url.searchParams.get('authIndexValue') || '';\n  const parser = new DOMParser();\n  const decodedValue = decodeURIComponent(value);\n  const doc = parser.parseFromString(decodedValue, 'application/xml');\n  const el = doc.querySelector('Value');\n  return el ? el.innerHTML : '';\n}\n\nexport function hasAuthzAdvice(json: AuthorizationJSON): boolean {\n  if (json.advices && json.advices.AuthenticateToServiceConditionAdvice) {\n    return (\n      Array.isArray(json.advices.AuthenticateToServiceConditionAdvice) &&\n      json.advices.AuthenticateToServiceConditionAdvice.length > 0\n    );\n  } else if (json.advices && json.advices.TransactionConditionAdvice) {\n    return (\n      Array.isArray(json.advices.TransactionConditionAdvice) &&\n      json.advices.TransactionConditionAdvice.length > 0\n    );\n  } else {\n    return false;\n  }\n}\n\nexport async function isAuthzStep(res: Response): Promise<boolean> {\n  // TODO: add comment\n  const clone = res.clone();\n  const json = await clone.json();\n  return !!json.callbacks;\n}\n\nexport function newTokenRequired(res: Response, requiresNewToken?: RequiresNewTokenFn): boolean {\n  if (typeof requiresNewToken === 'function') {\n    return requiresNewToken(res);\n  }\n  return res.status === 401;\n}\n\nexport function normalizeIGJSON(res: Response): AuthorizationJSON {\n  const advices: Advices = {};\n  if (res.url.includes('AuthenticateToServiceConditionAdvice')) {\n    advices.AuthenticateToServiceConditionAdvice = [getXMLValueFromURL(res.url)];\n  } else {\n    advices.TransactionConditionAdvice = [getXMLValueFromURL(res.url)];\n  }\n  return {\n    resource: '',\n    actions: {},\n    attributes: {},\n    advices,\n    ttl: 0,\n  };\n}\n\nexport async function normalizeRESTJSON(res: Response): Promise<AuthorizationJSON> {\n  return await res.json();\n}\n","import Config, { ConfigOptions } from '../config/index';\nimport { REQUESTED_WITH } from '../shared/constants';\nimport { isOkOr4xx } from '../util/http';\nimport { withTimeout } from '../util/timeout';\nimport { ActionTypes } from '../config/enums';\nimport middlewareWrapper from '../util/middleware';\nimport { getEndpointPath, resolve } from '../util/url';\n\n/**\n * Provides access to the session management API.\n */\nabstract class SessionManager {\n  /**\n   * Ends the current session.\n   */\n  public static async logout(options?: ConfigOptions): Promise<Response> {\n    const { realmPath, serverConfig } = Config.get(options);\n    const init: RequestInit = {\n      credentials: 'include',\n      headers: {\n        'accept-api-version': 'protocol=1.0,resource=2.0',\n        'x-requested-with': REQUESTED_WITH,\n      },\n      method: 'POST',\n    };\n\n    const path = `${getEndpointPath('sessions', realmPath, serverConfig.paths)}?_action=logout`;\n    const url = resolve(serverConfig.baseUrl, path);\n\n    const req = middlewareWrapper({ url: new URL(url), init }, ActionTypes.Logout);\n    const response = await withTimeout(fetch(req.url.toString(), req.init), serverConfig.timeout);\n    if (!isOkOr4xx(response)) {\n      throw new Error(`Failed to log out; received ${response.status}`);\n    }\n    return response;\n  }\n}\n\nexport default SessionManager;\n","/**\n * Implementation of the Deferred API to simplify handling of Promises.\n */\nclass Deferred<T> {\n  public promise: Promise<T>;\n  public resolve!: (value: T) => void;\n  public reject!: (reason: unknown) => void;\n\n  constructor() {\n    this.promise = new Promise<T>((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n\nexport default Deferred;\n","/** @hidden */\nclass LocalStorage {\n  private storage: Storage;\n  constructor(persist = false) {\n    this.storage = persist ? window.localStorage : window.sessionStorage;\n  }\n\n  public get<T>(key: string): T | undefined {\n    const value = this.storage.getItem(key);\n    if (!value) {\n      return undefined;\n    }\n\n    return JSON.parse(value);\n  }\n\n  public set<T>(key: string, value: T): void {\n    this.storage.setItem(key, JSON.stringify(value));\n  }\n\n  public remove(key: string): void {\n    this.storage.removeItem(key);\n  }\n}\n\nexport default LocalStorage;\n"],"sourceRoot":""}